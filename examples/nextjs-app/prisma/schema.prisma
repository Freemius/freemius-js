// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
    output   = "../generated/prisma"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model User {
    id            String    @id
    name          String
    email         String
    emailVerified Boolean
    image         String?
    createdAt     DateTime
    updatedAt     DateTime
    sessions      Session[]
    accounts      Account[]

    // Credits for the user, can be used for various purposes like AI generations, API calls, etc.
    // For more complex use cases, you can use a separate model for credits, attributed to different plans or features.
    credit Int @default(0)

    UserLicense UserLicense[]

    @@unique([email])
    @@map("user")
}

// For the sake of this example, we are using a single active subscription license per user.
// But the schema can handle multiple licenses per user.
// You will need to add `licenseId` as the composite/compound for the @@id field and update the business logic inside user-license.ts file.
// @see https://www.prisma.io/docs/orm/prisma-client/special-fields-and-types/working-with-composite-ids-and-constraints
// For example: @@unique([userId, fsLicenseId])
// @todo - Rename to `Entitlement`
model UserLicense {
    id     String @id @default(cuid())
    userId String @unique
    User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    // The following matches the IUserLicense from Freemius Node SDK.
    // You can also use these fields as BigInt if you prefer, and in that case you will need to convert the String to BigInt in your application.
    fsUserId    String
    fsPlanId    String
    fsLicenseId String
    expiration  DateTime?
    canceled    Boolean

    @@index([fsLicenseId])
    @@map("user_license")
}

model Session {
    id        String   @id
    expiresAt DateTime
    token     String
    createdAt DateTime
    updatedAt DateTime
    ipAddress String?
    userAgent String?
    userId    String
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([token])
    @@map("session")
}

model Account {
    id                    String    @id
    accountId             String
    providerId            String
    userId                String
    user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    accessToken           String?
    refreshToken          String?
    idToken               String?
    accessTokenExpiresAt  DateTime?
    refreshTokenExpiresAt DateTime?
    scope                 String?
    password              String?
    createdAt             DateTime
    updatedAt             DateTime

    @@map("account")
}

model Verification {
    id         String    @id
    identifier String
    value      String
    expiresAt  DateTime
    createdAt  DateTime?
    updatedAt  DateTime?

    @@map("verification")
}
