/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    '/developers/{developer_id}/bank_account/{bank_account_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the bank account.
                 * @example 1234
                 */
                bank_account_id: components['parameters']['bank_account_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve bank account
         * @description Retrieve the developer's bank account.
         */
        get: operations['developers/retrieve-bank-account'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/login.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Log in
         * @description
         *     Call this endpoint with your developer email and password and optionally 2FA auth code to login and set the authorization cookie.
         *
         *     > This is a public endpoint and does not require any authentication.
         *
         *     Please note that this endpoint is not meant for public use and should only be used by the Freemius Developer Dashboard. The login can expect a reCAPTCHA token and it will only work if the reCAPTCHA widget is initialized from the Developer Dashboard itself.
         *     To get API tokens for a product or a store, please do it from the Developer Dashboard app itself.
         *
         */
        post: operations['developers/log-in'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/addons.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all addons
         * @description Retrieve the addons collection.
         */
        get: operations['products/list-addons'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/addons/{addon_id}/plans/{plan_id}/features.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * List all plan's features
         * @description Retrieve the plan's features collection for the addon.
         */
        get: operations['addons/list-plans-features'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/addons/{addon_id}/plans.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
            };
            cookie?: never;
        };
        /**
         * List all plans
         * @description Retrieve the plans collection for the addon.
         */
        get: operations['addons/list-plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/addons/{addon_id}/plans/{plan_id}/pricing.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * List all pricings
         * @description Retrieve the pricing collection for the addon for specific the plan.
         */
        get: operations['addons/list-pricings'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/carts/{cart_id}/events.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Cart.
                 * @example 1234
                 */
                cart_id: components['parameters']['cart_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve cart events
         * @description Get the list of events associated with a cart.
         */
        get: operations['carts/retrieve-events'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/carts/{cart_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Cart.
                 * @example 1234
                 */
                cart_id: components['parameters']['cart_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a cart
         * @description Retrieve cart details associated with the product.
         *
         *     > You can use `enriched=true` to get more details about the cart, for example the `gross`, `coupon_code` and `licenses` fields will only be returned if enriched is enabled. Please see individual parameters in the response data below to learn more.
         */
        get: operations['carts/retrieve'];
        /**
         * Update a cart
         * @description Update the details of a particular cart.
         *
         *     > Updating a completed checkout cart is prohibited.
         *
         *     > Updating the coupon requires both the `coupon_id` and `coupon_code`.
         */
        put: operations['carts/update'];
        post?: never;
        /**
         * Delete a cart
         * @description Delete a particular cart.
         */
        delete: operations['carts/delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/carts.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all carts
         * @description Retrieve the cart collection associated with your product.
         *
         *     > If `enriched=true` you will get more details about the cart for example the `gross`, `coupon_code` and `licenses` fields.
         *
         *     > You can use the `filter` or `email` or `count` parameters to get more refined results from your query. Please learn more about the individual parameters below.
         */
        get: operations['carts/list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/coupons/{coupon_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a coupon
         * @description Get details of a specific coupon by ID.
         */
        get: operations['coupons/retrieve'];
        /**
         * Update a coupon
         * @description Update a specific coupon's details by ID.
         */
        put: operations['coupons/update'];
        post?: never;
        /**
         * Delete a coupon
         * @description Delete a specific coupon by ID.
         */
        delete: operations['coupons/delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/coupons.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all coupons
         * @description Retrieve the coupon collection associated with your product.
         *
         *     ### Searching and filtering
         *
         *     You can use filtering to search for a particular coupon or a group of coupons. The available parameters are:
         *
         *     - `code` - You can explicitly search coupon by the code.
         *     - `search` - You can search by coupon code or coupon ID.
         *     - `prefix` - You can filter by coupon code prefix.
         *
         *     > If using search and filtering, then the `is_enriched` parameter is ignored.
         *
         */
        get: operations['coupons/list'];
        put?: never;
        /**
         * Create a coupon
         * @description Create a new coupon.
         *
         *     Alternatively, you can use the [Freemius Developer Dashboard](https://dashboard.freemius.com).
         *
         *     > If you're creating coupon from your SaaS for some specific use case, please be sure to set the `plans`, `redemptions_limit`, `end_date`, and `is_one_per_user` properties to the appropriate values, to avoid misuse.
         */
        post: operations['coupons/create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/coupons/{coupon_id}/note.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a note
         * @description Get the details of a note associated with a coupon.
         */
        get: operations['coupons/retrieve-note'];
        /**
         * Update a note
         * @description Update a note for a coupon.
         */
        put: operations['coupons/update-note'];
        /**
         * Create a note
         * @description Create a new note for a coupon.
         */
        post: operations['coupons/create-note'];
        /**
         * Delete a note
         * @description Delete a note for a coupon.
         */
        delete: operations['coupons/delete-note'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/coupons/special.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve special coupons
         * @description Get the details of a special coupon.
         *          *
         *     ### Searching and filtering
         *
         *     You can use filtering to search for a particular coupon or a group of coupons by `type`.
         */
        get: operations['coupons/retrieve-special'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/coupons/{coupon_id}/special/{special_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
                /**
                 * @description The ID of the special coupon.
                 * @example cart_recovery
                 */
                special_id: components['parameters']['special_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Create a special coupon
         * @description Create a special coupon.
         */
        put: operations['coupons/create-special'];
        post?: never;
        /**
         * Delete a special coupon
         * @description Delete a special coupon by ID.
         */
        delete: operations['coupons/delete-special'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/emails/addresses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all email addresses
         * @description Retrieve the email addresses collection associated with a product. In case the product is using the store's email address configuration, the endpoint will return a `404` error.
         */
        get: operations['products/list-email-addresses'];
        put?: never;
        post?: never;
        /**
         * Delete all email addresses
         * @description Delete all email addresses associated with a product. Sets the product to use the default store-level email addresses.
         */
        delete: operations['products/delete-email-addresses'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/emails/addresses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update email addressses
         * @description Update the email addresses associated with a product.
         *
         *     > Only a plugin's developer can update the email addresses of their plugin.
         */
        put: operations['products/update-email-addressses'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/emails/{email_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /** @description The ID of the email. */
                email_id: string;
            };
            cookie?: never;
        };
        /**
         * Retrieve an email template
         * @description Retrieve a specific email template by ID.
         *     > This is an experimental feature, please don't use it.
         *
         *     > Only a developer can access email templates.
         */
        get: operations['products/retrieve-email-template'];
        /**
         * Update an email template
         * @description Update a specific email template by ID.
         *     > This is an experimental feature, please don't use it.
         *
         *     > Only a developer can update email templates.
         */
        put: operations['products/update-email-template'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/events/{event_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the event.
                 * @example 1234
                 */
                event_id: components['parameters']['event_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve an event
         * @description Retrieve a specific event by its ID. For instructions on creating webhook listeners, see the [documentation](https://freemius.com/help/documentation/saas/events-webhooks/#how_to_create_a_webhook).
         */
        get: operations['events/retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/events.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all events
         * @description Retrieve a list of events for a specific product. Supports filtering by type, state, and pagination. See the [documentation](https://freemius.com/help/documentation/saas/events-webhooks/#how_to_create_a_webhook) for instructions on creating a webhook to listen for events.
         */
        get: operations['events/list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/features/{feature_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the feature.
                 * @example 1234
                 */
                feature_id: components['parameters']['feature_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a feature
         * @description Retrieve a product's feature. In case of WordPress products, this is used automatically for the [in-dashboard pricing page](https://freemius.com/wordpress/checkout/).
         */
        get: operations['products/retrieve-feature'];
        /**
         * Update a feature
         * @description Update a product's feature. Please note that the `value` attribute can only be set and updated per plan with a developer scope authorization.
         */
        put: operations['products/update-feature'];
        post?: never;
        /**
         * Delete a feature
         * @description Delete a product's feature.
         */
        delete: operations['products/delete-feature'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/features.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all features
         * @description Retrieve the product features collection.
         */
        get: operations['products/list-features'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a product
         * @description Query and retrieve a specific product by ID.
         */
        get: operations['products/retrieve'];
        /**
         * Update a product
         * @description Update a specific product by ID.
         */
        put: operations['products/update'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/info.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Get product info
         * @description Get product info. Please use the Developer Dashboard to update the information of a product.
         */
        get: operations['products/get-info'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/addons/{addon_id}/plans/{plan_id}/features.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * List all plan's features for Addon
         * @description Get plan's features collection for an addon on a site.
         */
        get: operations['installations/list-plans-features-for-addon'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/clones/{clone_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the clone.
                 * @example 1234
                 */
                clone_id: components['parameters']['clone_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Resolve a clone
         * @description Resolve a clone of an install that was created by the product.
         */
        put: operations['installations/resolve-clone'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/clones.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a clone
         * @description Create a clone of an install associated with the product.
         *
         *     > Use this endpoint if you want to support migration or temporary or long-term duplicates for staging purposes.
         *
         *     By default the clone will be created in a pending state. For our [WP SDK](https://freemius.com/help/documentation/wordpress-sdk/safe-mode-clone-resolution-duplicate-website/) the clone will be created in a safe mode state.
         *
         *     After creating the clone, you will need to resolve the clone by updating its state and resolution. You will need to handle the licensing logic for the new install entity. Our [WP SDK](https://freemius.com/help/documentation/wordpress-sdk/safe-mode-clone-resolution-duplicate-website/) handles it automatically for WordPress products (plugins and themes).
         */
        post: operations['installations/create-clone'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/count.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve installs count
         * @description Retrieve the number of installs associated with the product.
         *
         *     ### Filtering
         *
         *     You can filter the count by `plan_id` or `is_active`.
         */
        get: operations['installations/retrieve-installs-count'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/downgrade.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Downgrade to the default plan
         * @description Downgrade install's plan to product’s default plan. This is usually the free plan.
         */
        put: operations['installations/downgrade-default-plan'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/events.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * List all events
         * @description Retrieve the event collection related to a product install.
         */
        get: operations['installations/list-events'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve an install
         * @description Retrieve the details related to the product install.
         */
        get: operations['installations/retrieve-install'];
        /**
         * Update an install
         * @description Update the details related to the product install.
         */
        put: operations['installations/update-install'];
        post?: never;
        /**
         * Delete an install
         * @description Delete a product install. This is different from an uninstall.
         */
        delete: operations['installations/delete-install'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all installs
         * @description Retrieve the install collection associated with the product.
         *
         *     Various filtering and search parameters are available to narrow down the results.
         */
        get: operations['installations/list-installs'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/license.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve an active license by UID
         * @description Retrieve the full information about the active license for the specified install when the UID of the install is known.
         *
         *     > No Authorization header is required.
         */
        get: operations['installations/retrieve-active-license-by-uid'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/licenses/{license_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve an active license by ID
         * @description Retrieve specific license of the install when the license ID and the license key are known but the UID of the install is not known.
         *
         *     > Retrieve the license information with product level authorization when the UID of the install is unknown.
         */
        get: operations['installations/retrieve-active-license-by-id'];
        /**
         * Activate a license
         * @description Activate license for an install.
         */
        put: operations['installations/activate-license'];
        post?: never;
        /**
         * Deactivate a license
         * @description Deactivate license from an install.
         */
        delete: operations['installations/deactivate-license'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/licenses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * List all active licenses
         * @description Retrieve the active licenses (usually only one) on an install.
         *
         *     > Use this endpoint only when the ID of the license is unknown.
         */
        get: operations['installations/list-active-licenses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/licenses/{license_id}/subscriptions.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        /**
         * List all subscriptions
         * @description Retrieve the subscription collection associated with a license.
         *
         *     > A license can have one active and multiple inactive subscriptions. Subscriptions are inactivated when a license is downgraded or upgraded or when the payment method is updated.
         */
        get: operations['licenses/list-subscriptions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/market_items.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * List all market items
         * @description Retrieves all market items associated with an `Install` entity.
         *
         *     > Market items are other products (not necessarily powered by Freemius) that are installed in the same site as the Freemius powered product.
         *
         *     > It is only after the user chooses to opt-in that such data is collected and sent to Freemius. Right now we only support WordPress products i.e. plugins and themes.
         */
        get: operations['installations/list-market-items'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developer/{developer_id}/products/{product_id}/installs/{install_id}/members.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add team member
         * @description Add new team member to the product.
         *
         *     > Only a developer with priviledge can add a new team member to a product.
         */
        post: operations['developers/add-team-member'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/payments.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * List all payments
         * @description Retrieve the payment associated with the install.
         *
         *     > This lists all payments collected from the license activated on this install.
         */
        get: operations['installations/list-payments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/permissions.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update permissions
         * @description Update permissions to a product install.
         */
        put: operations['installations/update-permissions'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/plans/{plan_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a plan
         * @description Retrieve the product plan details to which the install is subscribed.
         */
        get: operations['installations/retrieve-plan'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/plans.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * List all plans
         * @description Retrieve all the available product plans to which an install can subscribe.
         */
        get: operations['installations/list-plans'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/plans/{plan_id}/pricing/{pricing_id}/licenses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a new license
         * @description Create a new license and assign it to the install.
         *
         *     > Either `period` or `expires_at` must be set.
         */
        post: operations['installations/create-new-license'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/plans/{plan_id}/trials.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Start a trial
         * @description Start the trial of a plan for which an install is subscribed. The install must not have utilized the trial before.
         */
        post: operations['installations/start-trial'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/trials.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Cancel a trial
         * @description Cancel a trial associated with an specified install.
         */
        delete: operations['installations/cancel-trial'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/uninstall.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve uninstall details
         * @description Retrieve the details of an install where the product has been uninstalled.
         */
        get: operations['installations/retrieve-uninstall-details'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/updates.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * List all updates
         * @description Retrieve the product update collection available for an install.
         */
        get: operations['installations/list-updates'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/updates/latest.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve the latest update
         * @description Retrieve the latest product update available for an install.
         */
        get: operations['installations/retrieve-latest-update'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/users/{user_id}/ownership-change.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Change ownership
         * @description Change ownership of an install.
         */
        put: operations['installations/change-ownership'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/installs/{install_id}/users/{user_id}/verify.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Send a verification email
         * @description Sends an email to the user associated with the install, containing a link to verify the email address.
         *
         *     > With the `after_email_confirm_url` parameter, you can specify a URL address that the user will be auto forwarded to after email confirmation is clicked.
         */
        put: operations['installations/send-verification-email'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/is_active.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Check product status
         * @description Check if the product is active.
         */
        get: operations['products/check-status'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/activate.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Activate a license
         * @description Activate a license and if needed, create an install with the given properties.
         *
         *     > No Authorization header is required. If the provided license doesn't have an associated user, the endpoint will require the `first_name`, `last_name`, and `user_email` parameters to create a new user and associate it with the license.
         */
        post: operations['licenses/activate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/{license_id}/checkout/link.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate upgrade link
         * @description Generate an upgrade link for a license. The API accepts a variety of parameters with which you can specify new plans or quota or billing cycles. If you skip all those, then a manual renewal link will be generated instead. The link will be valid for 24 hours.
         */
        post: operations['licenses/generate-upgrade-link'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/deactivate.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Deactivate a license
         * @description Deactivate a license from an install (No Authorization header is required).
         */
        post: operations['licenses/deactivate'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/{license_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a license
         * @description Retrieve a specific license by its ID.
         */
        get: operations['licenses/retrieve'];
        /**
         * Update a license
         * @description Update a specific license by its ID. For ownership transfer please use the `new_user_id`. Ownership transfer is not supported for SaaS products.
         */
        put: operations['licenses/update'];
        post?: never;
        /**
         * Cancel a license
         * @description Cancel or delete a license. The Delete action is irreversible and will remove the license from the system.
         */
        delete: operations['licenses/cancel'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all licenses
         * @description Retrieve the license collection associated with a product.
         */
        get: operations['licenses/list'];
        /**
         * Assign a license
         * @description Associate an orphan license with a user and send a welcome email. If the user does not exist yet, one will be created.
         */
        put: operations['licenses/assign'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/{license_id}/installs.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Deactivate installs
         * @description Deactivate license from all installs.
         */
        delete: operations['licenses/deactivate-installs'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/licenses/{license_id}/installs/sync.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync all activations
         * @description Sync all the license activations with the actual available installs.
         */
        post: operations['licenses/sync-activations'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/{license_id}/renewals.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Send the renewal email
         * @description Send the manual license renewal email. The system will send emails only for licenses with cancelled or inactive subscriptions.
         */
        post: operations['licenses/send-renewal-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/resend.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend license keys
         * @description Send an email from Freemius with all the license keys associated with the given email address. The email is sent to the email address.
         */
        post: operations['licenses/resend-keys'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/{license_id}/resend.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resend the upgrade email
         * @description Resend the license upgrade email.
         */
        post: operations['licenses/resend-upgrade-email'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/licenses/{license_id}/subscription.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve latest subscription
         * @description A license can have only **one active subscription** at any given time. However, users may **upgrade**, **downgrade**, or **change their payment method**, which may result in a new subscription being created and associated with the same license.
         *
         *     Use this endpoint to **retrieve the latest or currently active subscription** linked to a specific license.
         *
         *     This is useful when you're building tools for license management or need to inspect the billing state of a customer. If you're integrating Freemius with your SaaS please refer to our [guide here](https://freemius.com/help/documentation/selling-with-freemius/saas-integration/).
         */
        get: operations['licenses/retrieve-latest-subscription'];
        put?: never;
        post?: never;
        /**
         * Cancel current subscription
         * @description Use this endpoint to **cancel the active subscription** associated with a license. If the license is currently in a **trialing state**, this will also cancel the trial.
         *
         *     This is useful when you want to programmatically offer a cancellation feature from within your SaaS or custom dashboards. If you're integrating Freemius with your SaaS, please see our [guide here](https://freemius.com/help/documentation/selling-with-freemius/saas-integration/).
         *
         *     > ⚠️ This action is irreversible and will immediately cancel the subscription or trial.
         *
         *     Cancelling an already cancelled subscription will not have any effect and the endpoint will return the same subscription details as before.
         */
        delete: operations['licenses/cancel-current-subscription'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/payments/{payment_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the payment.
                 * @example 1234
                 */
                payment_id: components['parameters']['payment_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a payment
         * @description Retrieve a specific payment.
         */
        get: operations['payments/retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/payments.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all payments
         * @description Retrieve the payment collection associated with the product.
         *
         *     ### Filtering and searching
         *
         *     You search and/or filter payments with these parameters:
         *
         *     - `search` - You can search by `payment_id`, `external_payment_id`, or `user_email`. It can be a number or string.
         *     - `user_id` - If you are looking to list all payments for a specific user use this.
         *     - `billing_cycle` - Filter payments by billing cycle. `0` means lifetime payments.
         *     - `currency` - Filter payments by currency.
         *     - `coupon_id` - Filter payments by coupon ID.
         *     - `filter` - Filter payments by different types: `all`, `refunds`, `not_refunded`, `disputed`, `won_disputes`, `chargebacks`.
         *
         *     Please see the parameters in the responses body for more information.
         */
        get: operations['payments/list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/payments/{payment_id}/invoice.pdf': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the payment.
                 * @example 1234
                 */
                payment_id: components['parameters']['payment_id'];
            };
            cookie?: never;
        };
        /**
         * Download invoice
         * @description Download invoice of a payment.
         */
        get: operations['payments/download-invoice'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/ping.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * GDPR compliance check
         * @description Find out if a product requires GDPR compliance based on the client's location.
         */
        get: operations['products/gdpr-compliance-check'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/currencies.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all currencies
         * @description Retrieve all the currencies available for all the plans.
         */
        get: operations['plans/list-currencies'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/{plan_id}/features.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * List all features
         * @description Retrieve the features collection of a plan.
         */
        get: operations['plans/list-features'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/{plan_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a plan
         * @description Retrieve a specific plan by ID.
         */
        get: operations['plans/retrieve'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all plans
         * @description Retrieve the plans collection.
         */
        get: operations['plans/list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/plans.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a plan
         * @description Create a new plan for the product.
         */
        post: operations['plans/create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/{plan_id}/pricing/clone.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Clone pricing to other currency
         * @description Create new pricing in a specified currency from an existing one.
         */
        post: operations['plans/clone-pricing-other-currency'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/{plan_id}/pricing/{pricing_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a pricing
         * @description Retrieve a specific plan pricing by ID.
         */
        get: operations['plans/retrieve-pricing'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/plans/{plan_id}/pricing/{pricing_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update a pricing
         * @description Update the plan's pricing by ID.
         *
         *     > Only developers can update a plan pricing.
         */
        put: operations['plans/update-pricing'];
        post?: never;
        /**
         * Delete a plan's pricing
         * @description Delete the plan pricing by ID.
         *
         *     > Only developers can delete a plan pricing.
         */
        delete: operations['plans/delete-s-pricing'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/{plan_id}/pricing.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        /**
         * List all plan's pricing
         * @description Retrieve the collection of all the plan's pricings.
         */
        get: operations['plans/list-s-pricing'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/plans/{plan_id}/pricing.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a pricing
         * @description Create new pricing for a plan.
         */
        post: operations['plans/create-pricing'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/plans/{plan_id}/pricing/{pricing_id}/licenses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a license
         * @description Create a new license for the plan and pricing. Please note that:
         *     1. Either `period` or `expires_at` or `is_block_features` must be set.
         *     2. If you create a license with `is_block_features` set to `false` and do not specify `period` and `expires_at`, the license will never expire or block features and will continue to work for lifetime.
         *     3. If you specify an email address, the user must have already activated a license or installed your product before. If your user has not activated a license, then please don't use the field and when they activate the license we will collect their email and register the user with Freemius.
         *     4. Use the `source` parameter only when creating migrated licenses from a legacy system.
         *
         *     More information about every other parameters can be found below.
         *
         */
        post: operations['plans/create-license'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/pricing.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve the pricing table data
         * @description Retrieve the plugin's full features & pricing data for a pricing table. This is used by our official [pricing page app](https://github.com/Freemius/pricing-page/) inside the WordPress SDK.
         */
        get: operations['products/retrieve-pricing-table-data'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/reviews/{review_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the review.
                 * @example 1234
                 */
                review_id: components['parameters']['review_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a review
         * @description Retrieve a product review by ID.
         */
        get: operations['reviews/retrieve'];
        /**
         * Update a review
         * @description Update a product review by ID
         *     > The rate can only be modified for developer generated reviews.
         */
        put: operations['reviews/update'];
        post?: never;
        /**
         * Delete a review
         * @description Delete a product review by ID.
         */
        delete: operations['reviews/delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/reviews.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all reviews
         * @description Retrieve the reviews collection.
         */
        get: operations['reviews/list'];
        put?: never;
        /**
         * Create a review
         * @description Create a product review.
         */
        post: operations['reviews/create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/reviews/summary.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve reviews summary
         * @description Retrieve the summary of the reviews collection. Every item is an object with a `rate` and `count` properties, where `rate` is the rating value (0-100) and `count` is the number of reviews with that rating. Reviews are grouped by their rating.
         */
        get: operations['reviews/retrieve-summary'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/settings/{setting_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the setting.
                 * @example 1234
                 */
                setting_id: components['parameters']['setting_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a setting
         * @description Retrieve a specific product setting.
         *      > Different settings are used for different functionalities around product. Please use the Developer Dashboard instead to modify the functionality.
         */
        get: operations['products/retrieve-setting'];
        /**
         * Update a setting
         * @description Update a specific product setting.
         *      > Different settings are used for different functionalities around product. Please use the Developer Dashboard instead to modify the functionality.
         */
        put: operations['products/update-setting'];
        post?: never;
        /**
         * Delete a setting
         * @description Delete a specific product setting.
         */
        delete: operations['products/delete-setting'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/skip.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Skip account connection
         * @description Skip the account connection step for the specified product. This is useful for testing purposes or for WordPress product integration. The functionality is handled automatically by our [WordPress SDK](https://github.com/Freemius/wordpress-sdk).
         */
        put: operations['products/skip-account-connection'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/subscriptions/{subscription_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a subscription
         * @description Retrieve a subscription associated with your product.
         */
        get: operations['subscriptions/retrieve'];
        /**
         * Update a subscription
         * @description Update a subscription's auto-renewal status and activate a cancellation coupon.
         */
        put: operations['subscriptions/update'];
        post?: never;
        /**
         * Cancel a subscription
         * @description Use this endpoint to **cancel the subscription**. If the subscription is currently in a **trialing state**, this will also cancel the trial.
         *
         *     This is useful when you want to programmatically offer a cancellation feature from within your SaaS or custom dashboards. If you're integrating Freemius with your SaaS, please see our [guide here](https://freemius.com/help/documentation/selling-with-freemius/saas-integration/).
         *
         *     > ⚠️ This action is irreversible and will immediately cancel the subscription or trial.
         *
         *     Cancelling an already cancelled subscription will not have any effect and the endpoint will return the same subscription details as before.
         */
        delete: operations['subscriptions/cancel'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/subscriptions.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all subscriptions
         * @description Retrieve the subscription collecttion associated with your product.
         *     > Subscriptions are created when someone purchases your product using the [Freemius Checkout](https://freemius.com/wordpress/checkout/).
         *
         *     ### Searching and filtering
         *     There are various parameters to help you search and/or filter subscription.
         *     - You can search by subscription ID, external subscription ID, or user email.
         *     - You can also filter by billing cycle, gateway, plan ID, and subscription status.
         *     Please see the parameters for more information.
         */
        get: operations['subscriptions/list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/subscriptions/{subscription_id}/payments.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        /**
         * List all payments
         * @description Retrieve the payment collection associated with the subscription.
         */
        get: operations['subscriptions/list-payments'];
        put?: never;
        /**
         * Create a new migrated payment
         * @description In case you want to synchronize migrated subscription from the legacy platform use this endpoint to have our system log a migrated payment. Depending on your use case you can also choose to extend the license. Please read our [migration documentation](https://freemius.com/help/documentation/migration/) to learn more.
         */
        post: operations['subscriptions/create-new-migrated-payment'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/tags/{tag_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the product version.
                 * @example 1234
                 */
                tag_id: components['parameters']['tag_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Update a deployment
         * @description Update a specific deployed version of the product. This applies to WordPress products only. Use this endpoint to update the `release_mode` of a deployment to make it available to your customers.
         *
         *     ### Release Modes
         *
         *     Defined by the `release_mode` property, with the following possible values:
         *
         *     - `pending` – The deployment is pending and not visible to customers. This is the default value.
         *     - `beta` – The deployment is in beta mode. Only customers with beta access will see this version.
         *     - `released` – The deployment is released and visible to all customers.
         *
         *     Additionally, WordPress plugins and themes support **incremental releases** and **staged rollouts**:
         *
         *     - [**Incremental Release**](https://freemius.com/help/documentation/release-management/incremental-update/): Controlled via the `is_incremental` flag, incremental releases enforce sequential updates, requiring users to install designated intermediate versions before proceeding to newer ones.
         *     - [**Staged Rollout**](https://freemius.com/help/documentation/release-management/staged-rollouts/): Managed through the `limit` and `percentage_limit` flags, staged rollouts enable gradual deployment of updates to a subset of users, allowing for monitoring and issue resolution before full release.
         *
         *     > Note: Incremental Release and Staged Rollout are not supported for templates and widgets.
         *
         */
        put: operations['deployments/update'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/tags/{tag_id}.zip': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the product version.
                 * @example 1234
                 */
                tag_id: components['parameters']['tag_id'];
            };
            cookie?: never;
        };
        /**
         * Download a deployment
         * @description Download a specific deployed version of the product. This is for WordPress products only (including plugins, themes, templates and widgets). It outputs the zip file of the deployed version.
         *
         *     > You can download both the premium and the free version of the deployment using the `is_premium` flag. This will help you setup automation to deploy Freemius generated free version to WordPress.org repository.
         *
         */
        get: operations['deployments/download'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/tags.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all deployments
         * @description Get the product version collection. This is for WordPress products only.
         */
        get: operations['deployments/list'];
        put?: never;
        /**
         * Create a deployment
         * @description Upload a new version of the product (for WordPress products only). The endpoint supports only the `multipart/form-data` content type and expects two payloads: `file` and `data`.
         *
         *     - `file` - The zip file containing the product. For WordPress plugins or themes this must contain the root directory.
         *     - `data` - Please omit this when deploying WordPress plugins and themes. In case of deploying templates and widgets, this needs to be a **stringified JSON** and must have the `version` and `requires_platform_version` properties.
         *
         *     An example of the `data` property:
         *
         *     ```
         *     {"version": "2.0.0", "requires_platform_version": "1.0.0"}
         *     ```
         *
         *     > After you have created a deployment, please send another PUT request to the newly created version to update the `release_status` to either `released` or `beta`. The default value is `pending` which means none of the customers will be able to see the new version.
         *
         *     You can learn more about the deployment process [here](https://freemius.com/help/documentation/getting-started/deployment-process/).
         *
         */
        post: operations['deployments/create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/tags/latest.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Get latest deployment
         * @description Get the information about the latest deployment the product has, including a secure download link. The download link will work without any authentication header and will expire in 24 hours.
         */
        get: operations['deployments/get-latest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/tags/latest.zip': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * Download latest deployment
         * @description Download the latest deployment the product has. This is for WordPress products only (including plugins, themes, templates and widgets). It outputs the zip file of the deployed version.
         */
        get: operations['deployments/download-latest'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/trials.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all trials
         * @description List the trial collection associated with the product.
         *
         *     To support trials, configure your product to [offer trial](https://freemius.com/help/documentation/selling-with-freemius/free-trials/) and then users can use the [Freemius Checkout](https://freemius.com/help/documentation/selling-with-freemius/freemius-checkout-buy-button/) to start a trial.
         *
         *     You will need to pass `trial=paid` or `trial=free` to the Checkout's paramters to start a trial.
         */
        get: operations['trials/list'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/uninstall.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        get?: never;
        /**
         * Uninstall from anonymous site
         * @description Uninstall a product from anonymous site
         */
        put: operations['installations/uninstall-from-anonymous-site'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/billing.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve billing
         * @description Retrieves the billing information of a user for a specific product.
         */
        get: operations['users/retrieve-billing'];
        /**
         * Update or create billing
         * @description Update or create the billing information for a user.
         */
        put: operations['users/update-or-create-billing'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/events.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * List all events
         * @description Retrieve a log of the events for the user associated with the product. Freemius tracks events such as opt-in, license activation, purchase etc. You can use this data for marketing and other automation purposes. More information can be found [here](https://freemius.com/help/documentation/marketing-automation/events-webhooks/).
         */
        get: operations['users/list-events'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * Retrieve a user
         * @description Retrieve a user associated with your product.
         */
        get: operations['users/retrieve'];
        /**
         * Update a user
         * @description Update a user associated with your product.
         */
        put: operations['users/update'];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        /**
         * List all users
         * @description
         *     Gets the user collection associated with a product.
         *
         *     ## Filtering
         *     There are a few filters that can be applied to the request.
         *
         *     ### Search by email
         *     You can specify the parameter `email` to filter the users by email. Optionally you can also put a valid email in the `search` parameter.
         *
         *     ### Other filtering options
         *     The `search` parameter also accepts the following values:
         *
         *     1. User ID (number).
         *     2. Full or partial name (string).
         *     3. Full or partial email (string).
         *
         *     ## Pagination
         *     You can use the combination of `count` and `offset` parameters to paginate the results.
         *
         */
        get: operations['users/list'];
        put?: never;
        /**
         * Create a user
         * @description Create a new user associated with the product.
         *
         *     The user will be linked to the product if they already exist in Freemius.
         *
         *     > User can only be created for products with elevated permissions or during data migration.
         *
         *     ## Migrating users from other platforms
         *
         *     Freemius allows to migrate your users from other platforms. To do so, you need to set the `is_migration` parameter to `true`. This will prevent any emails from being sent to the users and will not log any events.
         *     Once migrated the user can use their existing licenses to activate your product.
         */
        post: operations['users/create'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/installs.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * List all installs
         * @description Retrieve the install collection associated with the user.
         *
         *      Various filtering and search parameters are available to narrow down the results.
         */
        get: operations['users/list-installs'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/licenses.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * List all licenses
         * @description Retrieve the license collection associated with a user.
         */
        get: operations['users/list-licenses'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/licenses/{license_id}/review_url.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        /**
         * Get review URL
         * @description Retrieve the review URL associated with a license.
         */
        get: operations['licenses/get-review-url'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/licenses/{license_id}/reviews.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a review
         * @description Creat a review associated with a license. If you want to create/import reviews which are not associated with a license or from a different system, please use the Review endpoint under `products/{product_id}/reviews.json`.
         */
        post: operations['licenses/create-review'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/payments.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * List all payments
         * @description Retrieve the payment collection associated with a user.
         */
        get: operations['users/list-payments'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/subscriptions.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        /**
         * List all subscriptions
         * @description Retrieve the subscription collection associated with a user.
         */
        get: operations['users/list-subscriptions'];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/products/{product_id}/users/{user_id}/tokens/checkout.json': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create a checkout token
         * @description Create a 1 min long token that represents the details of the user for setting the user context in a checkout session. Please read our [documentation](https://freemius.com/help/documentation/selling-with-freemius/freemius-checkout-buy-button/#user_token_in_checkout_new) to learn how to use it.
         */
        post: operations['users/create-checkout-token'];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    '/developers/{developer_id}/products/{product_id}/plans/{plan_id}.json': {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /**
         * Update a plan
         * @description
         *     Update an existing plan by ID.
         *
         *     > Only developers can update plans.
         */
        put: operations['plans/update'];
        post?: never;
        /**
         * Delete a plan
         * @description Delete a specific plan by ID.
         */
        delete: operations['plans/delete'];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ApiError: {
            /**
             * @description The API request path.
             * @example :/products/product_id/users.json
             */
            path?: string;
            /** @description This object contains the error details. */
            error?: {
                /**
                 * @description The type of the error encountered by the server.
                 * @example UnauthorizedAccess
                 */
                type?: string;
                /**
                 * @description The descriptive error message.
                 * @example Some error has occured.
                 */
                message?: string;
                /**
                 * @description The error code.
                 * @example unauthorized_access
                 */
                code?: string;
                /**
                 * @description The HTTP status code returned by the server.
                 * @example 401
                 */
                http?: number;
                /**
                 * @description Current timestamp.
                 * @example Thu, 11 May 2023 11:45:30 +0000
                 */
                timestamp?: string;
            };
            /**
             * @description This object sends back the request payload as received by the server (both from path and from body or query).
             * @example {
             *       "beautify": true,
             *       "format": "json"
             *     }
             */
            request?: {
                [key: string]: unknown;
            };
        };
        /** @description Some enums that are common to many entities. */
        CommonEnums: {
            /** @enum {string} */
            ProductType?: 'plugin' | 'theme' | 'widget' | 'template';
            /** @enum {string} */
            RefundPolicy?: 'flexible' | 'moderate' | 'strict';
            /**
             * @description The type of renewals discount, percentage or dollar.
             * @enum {string}
             */
            RenewalsDiscountType?: 'percentage' | 'dollar';
            /**
             * @description The type of authentication. If `app2fa` is set, the person has signed for 2FA authentication.
             * @enum {string}
             */
            AuthenticationType?: 'app2fa' | 'password';
            /**
             * @description The status of the last email sent to the user.
             * @enum {string}
             */
            EmailStatus?: 'delivered' | 'bounce' | 'dropped';
            /**
             * @description The billing cycle of the subscription in number of months. 1 means monthly, 12 means annually, 0 means lifetime usually when subscriptions are created for lifetime trials.
             * @enum {number}
             */
            BillingCycle?: 1 | 12 | 0;
            /**
             * @description The billing cycle or period of a plan.
             * @enum {string}
             */
            PlanPeriod?: 'monthly' | 'annual' | 'lifetime';
            /**
             * @description The type of the person. A developer is a person who sells software through the Freemius platform, a user is a person who buys software through the Freemius platform.
             * @enum {string}
             */
            PersonType?: 'developer' | 'user';
            /**
             * @description The type of the discount. "percentage" means the discount is a percentage of the price, "dollar" means the discount is a fixed amount.
             * @enum {string}
             */
            DiscountType?: 'dollar' | 'percentage';
            /**
             * @description The payment method selected for the purchase.
             * @default cc
             * @enum {string}
             */
            PaymentMethodType: 'cc' | 'paypal' | 'ideal';
            /**
             * @description 3-char currency code.
             * @enum {string}
             */
            Currency?: 'usd' | 'eur' | 'gbp';
            /**
             * @description The type of the payment.
             * @default payment
             * @enum {string}
             */
            PaymentType: 'payment' | 'refund' | 'disputed' | 'won_dispute' | 'lost_dispute' | 'chargeback';
            /**
             * @description The product sales model.
             * @example [
             *       "freemium"
             *     ]
             * @enum {string}
             */
            BusinessModel?: 'free' | 'freemium' | 'premium';
            /**
             * @description State of the event log. It essentially says whether the event was processed through the webhook or not.
             * @enum {string}
             */
            EventLogState?: 'processed' | 'pending' | 'canceled' | 'error';
        };
        /** @description This schema lists the common properties shared by various other schemas or entities. */
        CommonProperties: {
            /**
             * Format: int64
             * @description The unique identifier of the entity.
             * @example 123456
             */
            id?: string;
            /**
             * Format: date-time
             * @description The date and time the entity was created, under UTC timezone.
             * @example 2025-01-01 00:00:00
             */
            created?: string;
            /**
             * Format: date-time
             * @description The date and time the entity was updated, under UTC timezone. If `null` then the entity was never updated since its creation.
             * @example 2025-01-01 00:00:00
             */
            updated?: string | null;
            /**
             * Format: binary
             * @description The icon of the entity, must be a valid JPG, PNG or GIF image, with dimension not exceeding 300px by 300px. Max allowed size is 200KB
             */
            icon?: string;
            /**
             * Format: int64
             * @description The ID of the product the entity belongs to.
             * @example 123456
             */
            plugin_id?: string;
            /**
             * Format: int64
             * @description The ID of the product the entity belongs to. Null means it has not been associated with a product yet.
             * @example 123456
             */
            plugin_id_nullable?: string | null;
            /**
             * @description The environment the entity belongs to. 0 means it belongs to the production environment, 1 means it belongs to the sandbox environment.
             * @example 0
             * @enum {number}
             */
            environment?: 1 | 0;
            /**
             * Format: int64
             * @description The ID of the user the entity belongs to.
             * @example 123456
             */
            user_id?: string;
            /**
             * Format: int64
             * @description The ID of the installation or site the entity is associated with.
             * @example 123456
             */
            install_id?: string;
            /**
             * Format: int64
             * @description The ID of the installation or site the entity is associated with, a `null` value means it has not been associated with an installation yet.
             * @example 123456
             */
            install_id_nullable?: string | null;
            /**
             * Format: int64
             * @description The ID of the plan associated with the entity.
             * @example 123456
             */
            plan_id?: string;
            /**
             * Format: int64
             * @description The ID of the subscription associated with the entity.
             * @example 123456
             */
            subscription_id?: string;
            /**
             * Format: int64
             * @description The ID of the subscription associated with the entity.
             * @example 123456
             */
            subscription_id_nullable?: string | null;
            /**
             * Format: int64
             * @description The ID of the payment associated to the entity.
             * @example 123456
             */
            payment_id_nullable?: string | null;
            /**
             * Format: int64
             * @description The ID of the plan associated with the entity.
             * @example 123456
             */
            plan_id_nullable?: string | null;
            /**
             * Format: int64
             * @description The ID of the pricing associated with the entity.
             * @example 123456
             */
            pricing_id?: string;
            /**
             * Format: int64
             * @description The ID of the pricing associated with the entity.
             * @example 123456
             */
            pricing_id_nullable?: string | null;
            /**
             * Format: int64
             * @description The ID of the license associated with the entity.
             * @example 123456
             */
            license_id?: string;
            /**
             * Format: int64
             * @description The ID of the license associated with the entity.
             * @example 123456
             */
            license_id_nullable?: string | null;
            /**
             * Format: int64
             * @description The ID of the coupon associated with the entity.
             * @example 123456
             */
            coupon_id?: string;
            /**
             * Format: int64
             * @description The ID of the coupon associated with the entity.
             * @example 123456
             */
            coupon_id_nullable?: string | null;
            /**
             * @description Coupon code associated with the cart.
             * @example BLACKFRIDAY2024
             */
            coupon_code?: string | null;
            /**
             * Format: ipv4|ipv6
             * @description The IP address associated with the entity.
             * @example 0.0.0.0
             */
            ip_nullable?: string | null;
            /**
             * Format: ipv4|ipv6
             * @description The IP address associated with the entity.
             * @example 0.0.0.0
             */
            ip?: string;
            /**
             * @description The [ISO 3166-1 alpha 2](http://www.wikiwand.com/en/ISO_3166-1_alpha-2) two-letter country code associated with the entity.
             * @example us
             */
            country_code_nullable?: string | null;
            /**
             * @description The [ISO 3166-1 alpha 2](http://www.wikiwand.com/en/ISO_3166-1_alpha-2) two-letter country code associated with the entity.
             * @example us
             */
            country_code?: string;
            /**
             * @description The postal/zip code of the location.
             * @example 92710
             */
            zip_postal_code?: string;
            /**
             * @description The postal/zip code of the location.
             * @example 92710
             */
            zip_postal_code_nullable?: string | null;
            /**
             * @description The business VAT number (EU or UK territories) or other tax ID (for example Sales Tax ID for the US).
             * @example GB12345678
             */
            vat_id_nullable?: string | null;
            /**
             * @description The actual tax amount. It could be any kind of tax, not necessarily VAT. For example we support US Sales Tax.
             * @default 0
             * @example 1.24
             */
            vat: number;
            /**
             * Format: uid
             * @description Unique identifier of the caller. The UID must be same when pinging and when activating or deactivating a license. The generation of the UID is a responsibility of the client.
             * @example 7W131pej6bJYV8WYM9KgGoBNB9bCiSrY
             */
            uid?: string;
            /**
             * Format: int64
             * @description The ID of the user the entity belongs to. If NULL then still not associated to any user.
             * @example 123456
             */
            user_id_nullable?: string | null;
            /**
             * @description The URL of the entity.
             * @example https://www.example.com
             */
            url?: string;
        };
        /** @description Some request body schemas that are common to many endpoints. */
        CommonRequestSchemas: {
            /**
             * Format: json
             * @description The JSON data of the endpoint, matching the same schema as the json request body. Must be a valid JSON object.
             * @example {"name":"My Product"}
             */
            MultipartJsonData?: string;
        };
        /** @description Resource explaining different relational data for migrated entities. For example if you'd want to migrate your product from EDD to Freemius, then your existing subscriptions, payments, licenses etc would have a specific value in their `source` property. To get support migrating from other platform please see our [documentation](https://freemius.com/help/documentation/migration/). */
        Migration: {
            /**
             * @description The source of the migration data. To get support migrating from other platform please see our [documentation](https://freemius.com/help/documentation/migration/).
             * @example ls
             * @enum {string}
             */
            source_external_id?:
                | 'freemius'
                | 'edd'
                | 'easydigitaldownloads'
                | 'woo'
                | 'wc'
                | 'woocommerce'
                | 'gumroad'
                | 'cc'
                | 'codecanyon'
                | 'tf'
                | 'themeforest'
                | 'appsumo'
                | 'sendowl'
                | 'whmcs'
                | 'ls'
                | 'lemonsqueezy';
            /**
             * @description
             *     The source of the migration data. To get support migrating from other platform please see our [documentation](https://freemius.com/help/documentation/migration/).
             *
             *     * `0` - Freemius
             *     * `1` - Other
             *     * `2` - Easy Digital Downloads (EDD)
             *     * `3` - WooCommerce (WC)
             *     * `4` - Rating Widget
             *     * `5` - Gumroad
             *     * `6` - CodeCanyon
             *     * `7` - ThemeForest
             *     * `8` - AppSumo
             *     * `9` - SendOwl
             *     * `10` - WHMCS
             *     * `11` - Lemon Squeezy
             *
             *
             * @enum {number}
             */
            source?: 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11;
        };
        CheckoutUpgradeLink: {
            /**
             * Format: uri
             * @description The URL to the checkout page.
             */
            url?: string;
            /**
             * @description The settings used to generate the link. This can be fed as-is to the [Freemius Checkout JS SDK](https://github.com/Freemius/freemius-checkout-js) if you're using modals in your website.
             * @example {
             *       "plugin_id": 1,
             *       "plan_id": 2,
             *       "licenses": "unlimited"
             *     }
             */
            settings?: {
                [key: string]: unknown;
            };
            /**
             * Format: date-time
             * @description The expiration date of the link.
             */
            expires?: string;
        };
        BankAccount: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /** @description ID of the person. */
            person_id?: number;
            person_type?: components['schemas']['CommonEnums']['PersonType'];
            /** @description Last 4 digits of the account number. */
            account_last4?: string;
            /** @description Name of the account holder. */
            name?: string;
            /** @description Phone number of the account holder. */
            phone?: string;
            /** @description Address line one of the account holder. */
            address_street?: string;
            /** @description Address line two of the account holder. */
            address_apt?: string | null;
            /** @description City of the account holder. */
            address_city?: string;
            /** @description State of the account holder. */
            address_state?: string | null;
            /** @description ZIP or postal code of the account holder. */
            address_zip?: string;
            address_country_code?: components['schemas']['CommonProperties']['country_code'];
            /** @description Name of the bank. */
            bank_name?: string;
            /** @description City and state of the bank. */
            bank_city_state?: string;
            bank_country_code?: components['schemas']['CommonProperties']['country_code'];
            /** @description Swift code of the bank. */
            swift?: string;
            /** @description IFSC number of Indian banks only. */
            ifsc?: string | null;
            /** @description 6 digits Sort code of UK banks only. */
            sort_code?: string | null;
            /** @description 9 digits Routing number for US banks only. */
            aba_rtn?: string | null;
            /** @description Email account for Wise banks only. */
            wise_account_email?: string | null;
        };
        /** @description A Beta participation represents a choice by the user to utilize the beta version of the product. */
        BetaParticipation: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            user_id?: components['schemas']['CommonProperties']['user_id'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id_nullable'];
            install_id?: components['schemas']['CommonProperties']['install_id_nullable'];
            /** @description Whether the product user is participating in the beta program. */
            is_beta?: boolean;
        };
        /** @description Representation of billing details associated with a person or a business. */
        Billing: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * @description The name of the business.
             * @example Freemius, Inc.
             */
            business_name?: string;
            /**
             * @description The first name used in the billing.
             * @example John
             */
            first?: string;
            /**
             * @description The last name used in the billing.
             * @example Doe
             */
            last?: string;
            /**
             * @description The email used in the billing.
             * @example foo@freemius.com
             */
            email?: string;
            /**
             * @description The phone number used in the billing.
             * @example 555-555-5555
             */
            phone?: string;
            /**
             * @description The website used in the billing.
             * @example https://freemius.com
             */
            website?: string;
            /**
             * @description The business VAT number (EU or UK territories) or other tax ID (for example Sales Tax ID for the US).
             * @example GB123456789
             */
            tax_id?: string;
            /**
             * @description The street address used in the billing.
             * @example 21st Jump Street
             */
            address_street?: string;
            /**
             * @description The street address 2 used in the billing.
             * @example Block II
             */
            address_apt?: string;
            /**
             * @description The city used in the billing.
             * @example Atlanta
             */
            address_city?: string;
            /**
             * @description The country used in the billing.
             * @example United States
             */
            address_country?: string;
            address_country_code?: components['schemas']['CommonProperties']['country_code'];
            /**
             * @description The state of the location.
             * @example New York
             */
            address_state?: string;
            /**
             * @description ZIP or postal code.
             * @example 00001
             */
            address_zip?: string;
        };
        /** @description A cart represents a buyer's intent to purchase a product. The state of the cart is based on the action performed by the buyer. You can read our [documentation](https://freemius.com/help/documentation/marketing-automation/cart-abandonment-recovery/) to learn more about it. */
        Cart: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * @description The status of the cart.
             * @default visit
             * @enum {string}
             */
            status:
                | 'pricing_visit'
                | 'visit'
                | 'abandoned'
                | 'completed'
                | 'email_1_sent'
                | 'email_2_sent'
                | 'email_3_sent'
                | 'recovered';
            /**
             * @description The mode the checkout app was opened in, when the cart was created. For example
             *
             *     - `dashboard`: The checkout was opened through our [WordPress SDK](https://freemius.com/help/documentation/wordpress-sdk/).
             *     - `dialog`: The checkout was opened through our [JavaScript SDK](https://freemius.com/help/documentation/selling-with-freemius/freemius-checkout-buy-button/).
             *     - `page`: The checkout was opened directly.
             * @default dialog
             * @enum {string}
             */
            mode: 'dashboard' | 'dialog' | 'page';
            payment_method?: components['schemas']['CommonEnums']['PaymentMethodType'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            plan_id?: components['schemas']['CommonProperties']['plan_id_nullable'];
            pricing_id?: components['schemas']['CommonProperties']['pricing_id_nullable'];
            /** @description Whether the plan is a trial. */
            is_trial?: boolean;
            billing_cycle?: components['schemas']['CommonEnums']['BillingCycle'];
            install_id?: components['schemas']['CommonProperties']['install_id_nullable'];
            coupon_id?: components['schemas']['CommonProperties']['coupon_id_nullable'];
            country_code?: components['schemas']['CommonProperties']['country_code_nullable'];
            zip_postal_code?: components['schemas']['CommonProperties']['zip_postal_code'];
            vat_id?: components['schemas']['CommonProperties']['vat_id_nullable'];
            user_id?: components['schemas']['CommonProperties']['user_id_nullable'];
            /**
             * @description The prospect's email address.
             * @example doe@example.com
             */
            email?: string;
            /**
             * @description The prospect's first name.
             * @example John
             */
            first?: string;
            /**
             * @description The prospect's last name.
             * @example Doe
             */
            last?: string;
            ip?: components['schemas']['CommonProperties']['ip'];
            /**
             * @description The page URL containing the checkout.
             * @example https://example.com/pricing
             */
            url?: string;
            environment?: components['schemas']['CommonProperties']['environment'];
            /**
             * @description Cart supports [recovery campaign](https://freemius.com/help/documentation/marketing-automation/cart-abandonment-recovery/). If disabled, the recovery campaign will be stopped.
             * @default false
             */
            is_disabled: boolean;
            /**
             * @description If set to `true`, the cart recovery campaign will be non-functional and cannot be re-enabled. This happens if the prospect has clicked the "unsubscribe" link from any of the cart recovery emails.
             * @default false
             */
            is_unsubscribed: boolean;
            /**
             * Format: date-time
             * @description The first time the prospect visited the checkout when the cart was being created.
             * @example 2025-01-01 00:00:00
             */
            visited?: string | null;
            /**
             * Format: date-time
             * @description The cart completion date.
             * @example 2025-01-01 00:00:00
             */
            completed?: string | null;
            /**
             * Format: float
             * @description The cart's original price.
             * @example 19.99
             */
            price?: number;
        };
        /** @description A coupon can be used during the checkout to apply some discounts. */
        Coupon: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: int64
             * @description The ID of the entity the coupon belongs to.
             * @example 12345
             */
            entity_id?: string;
            /**
             * @description The type of the entity the coupon belongs to.
             * @example plugin
             * @enum {string}
             */
            entity_type?: 'plugin' | 'store' | 'marketplace';
            /**
             * @description Comma separated IDs of plans the coupon would work for. If `null`, coupon supports all plans.
             * @example 123,654,8757
             */
            plans?: string | null;
            /**
             * @description Comma separated licenses quota limits. If `null`, coupon supports all license limits. `0` is used for an unlimited-site license.
             * @example 1,5,10,0
             */
            licenses?: string | null;
            /**
             * @description Comma separated billing cycles. If `null`, coupon supports all billing cycles. `0` is used for lifetime billing cycle.
             * @example 1,12
             */
            billing_cycles?: string | null;
            /**
             * @description The coupon code.
             * @example BLACKFRIDAY2024
             */
            code?: string;
            /** @description The discount amount. */
            discount?: number;
            discount_type?: components['schemas']['CommonEnums']['DiscountType'];
            /**
             * Format: date-time
             * @description Date and time from when the coupon will be activated.
             * @example 2025-04-01 11:13:28
             */
            start_date?: string;
            /**
             * Format: date-time
             * @description Date and time, after which the coupon will be expired.
             * @example 2025-04-30 19:17:21
             */
            end_date?: string;
            /** @description The total number of redemptions of this coupon. */
            redemptions?: number;
            /** @description The total number of redemptions limit of this coupon. */
            redemptions_limit?: number | null;
            /** @description Whether the coupon also supports discount for renewals or first payment only. */
            has_renewals_discount?: boolean;
            /** @description Whether the coupon supports discount for add-ons or not. */
            has_addons_discount?: boolean;
            /** @description Whether to limit the coupon usage one per user. */
            is_one_per_user?: boolean;
            /** @description Whether the coupon is active. Use this flag to temporarily disable the coupon. */
            is_active?: boolean;
            /**
             * @description The user type the coupon is applicable to.
             * @default all
             * @enum {string}
             */
            user_type: 'all' | 'new' | 'current' | 'previous' | 'customer' | 'migrated';
            source?: components['schemas']['Migration']['source'];
        };
        /** @description Class CouponEnriched */
        CouponEnriched: components['schemas']['Coupon'] & {
            /** @description If the discount type is `dollar`, then this field will hold values of absolute discount amount per supported currency. */
            discounts?: {
                /**
                 * Format: float
                 * @description The discount amount in absolute value for USD currency.
                 * @example 10.5
                 */
                usd?: number | null;
                /**
                 * Format: float
                 * @description The discount amount in absolute value for EUR currency.
                 * @example 10.5
                 */
                eur?: number | null;
                /**
                 * Format: float
                 * @description The discount amount in absolute value for GBP currency.
                 * @example 10.5
                 */
                gbp?: number | null;
            };
        };
        /** @description Represents a link between coupons to various special entities. Example: Affiliate coupon tracking, cart abandonment recovery of a product. */
        CouponEntity: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * @description The ID of the coupon.
             * @example 12345
             */
            coupon_id?: number;
            /**
             * Format: int64
             * @description The ID of the entity.
             * @example 12345
             */
            entity_id?: string;
            /**
             * @description The type of the entity (Usually `2` which means it is a product or `20` which means it is an affiliate).
             * @example 2
             */
            entity_type?: number;
            /**
             * @description The special coupon type.
             * @enum {string}
             */
            type?:
                | 'affiliate'
                | 'renewals_discount'
                | 'manual_renewals_discount'
                | 'subscription_cancellation'
                | 'cart_recovery'
                | 'exit_intent';
        };
        /** @description A coupon associated with a special checkout cart on conversions and renewals to reduce churn rate. */
        CouponEntityEnriched: components['schemas']['CouponEntity'] & {
            code?: components['schemas']['Coupon']['code'];
            redemptions?: components['schemas']['Coupon']['redemptions'];
            discount?: components['schemas']['Coupon']['discount'];
            discount_type?: components['schemas']['Coupon']['discount_type'];
            discounts?: components['schemas']['CouponEnriched']['allOf']['1']['discounts'];
            has_renewals_discount?: components['schemas']['Coupon']['has_renewals_discount'];
        };
        /** @description Class Customer
         *
         *     An entity to store the connection between a user to its gateway's customer ID. */
        Customer: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            user_id?: components['schemas']['CommonProperties']['user_id'];
            /** @description The external ID from the gateway. */
            external_id?: string;
            /**
             * @description The gateway used for the purchase.
             * @enum {string}
             */
            gateway?: 'paypal' | 'stripe' | 'stripe_eu' | 'test';
        };
        /** @description A developer is someone who has registered to sell products on the Freemius platform. */
        Developer: {
            /**
             * @description Email address of the person.
             * @example jane@example.com
             */
            email?: string;
            /**
             * @description First name of the person.
             * @example Jane
             */
            first?: string;
            /**
             * @description Last name of the person.
             * @example Doe
             */
            last?: string;
            /**
             * @description Profile picture URL.
             * @example https://example.com/profile-pic.jpg
             */
            picture?: string;
            /**
             * Format: ipv4|ipv6
             * @description The IP address (v4 or v6).
             * @example 127.0.0.1
             */
            ip?: string | null;
            /**
             * @description Whether the person is trusted or not.
             * @example true
             */
            is_verified?: boolean;
            auth?: components['schemas']['CommonEnums']['AuthenticationType'];
            /**
             * @description The secret key associated with the entity for authorization.
             * @example sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            secret_key?: string;
            /**
             * @description The public key associated with the entity for authorization.
             * @example pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            public_key?: string;
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * @deprecated
             * @description The legacy PayPal email of the developer. Please use the new billing instead.
             * @example payout@example.com
             */
            paypal_email?: string;
            /**
             * @description Additional address of the developer where Freemius will send security related emails.
             * @example security@example.com
             */
            security_email?: string;
            is_trusted?: boolean;
            /**
             * Format: float
             * @description Developer's paid out gross revenue (excluding chargeback fees, payout fees, and refund fees).
             * @example 1000.00
             */
            earnings?: number;
            /**
             * Format: float
             * @description Developer's unpaid gross revenue. Necessary for properly calculating the commission.
             * @example 100.00
             */
            last_cycle_earnings?: number;
            /**
             * Format: json
             * @description Commission structure. The structure `{1000: 0.3, 5000: 0.2, above: 0.1}`, means
             *     that there's 30% commission on up to $1,000 rev, 20% on the revenues from $1,001-$5,000 and 10% after $5,001.
             * @example {"above":0.1}
             */
            commission?: string;
        };
        /** @description Discount entity holding the relation between a gateway entity and a coupon. */
        Discount: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: int64
             * @description The ID of the related entity.
             */
            entity_id?: string;
            /**
             * @description The type of the related entity. Defaults to `payment`.
             * @default payment
             * @enum {string}
             */
            entity_type: 'payment' | 'subscription';
            /**
             * @description The type of discount. Possible values are `prorate` and `subscription_cancellation`. Defaults to `prorate`.
             * @default prorate
             * @enum {string}
             */
            type: 'prorate' | 'subscription_cancellation';
            /**
             * Format: float
             * @description Discount amount in USD.
             * @example 10.0
             */
            discount?: number;
            /**
             * Format: int64
             * @description The ID of the related coupon.
             */
            coupon_id?: string;
        };
        /** @description Represents an email template. This feature is not fully made and should not be used. */
        EmailTemplate: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * @description The category of the email template.
             * @example user_register
             */
            category?: string;
            /**
             * @description The subject of the email.
             * @example Welcome to Freemius!
             */
            subject?: string;
            /** @description The plaintext version of the email. */
            plain?: string;
            /** @description The HTML version of the email. */
            html?: string;
        };
        /** @description A record of an event logged in the system. */
        EventLog: {
            state?: components['schemas']['CommonEnums']['EventLogState'];
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * @description The type of event. See our documented list of the available [event types](https://freemius.com/help/documentation/marketing-automation/events-webhooks/#event_types).
             * @example license.activated
             */
            type?: string;
            /**
             * Format: int64
             * @description The ID of the developer.
             * @example 1234
             */
            developer_id?: string;
            plugin_id?: components['schemas']['CommonProperties']['plugin_id_nullable'];
            user_id?: components['schemas']['CommonProperties']['user_id_nullable'];
            install_id?: components['schemas']['CommonProperties']['install_id_nullable'];
            /** @description The details of the triggered event. This can be a `string` showing ID of the associated entity, an `object` with additional information of the event, or array of objects. */
            data?: unknown;
            /**
             * @description The type of trigger for the event.
             * @example system
             * @enum {string}
             */
            event_trigger?: 'system' | 'developer' | 'plugin' | 'user' | 'install';
            /**
             * Format: date-time
             * @description The time the event was processed. If it is `null`, the event is pending.
             * @example 2025-01-01 12:00:00
             */
            process_time?: string | null;
        };
        /** @description A feature is a distinct functionality or capability of a product that delivers value to users by addressing specific needs or solving problems. */
        Feature: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: int64
             * @description The ID of the Plugin.
             * @example 1234
             */
            plugin_id?: string;
            /**
             * @description The title of the feature.
             * @example Pageviews per month
             */
            title?: string;
            /**
             * @description The description of the feature, up to 256 characters. This will be displayed as the description in the tooltip on the pricing page.
             * @example The number of times a page is loaded.
             */
            description?: string;
            /**
             * @description Whether the feature is highlighted and will be shown in the main pricing table. If set as `false`, the feature will be only shown in the plans' comparison table.
             * @example true
             */
            is_featured?: boolean;
        };
        FeatureEnriched: components['schemas']['Feature'] & {
            /**
             * @description The value of the feature associated with the plan.
             * @example 5MB
             */
            value?: string;
            plan_id?: components['schemas']['CommonProperties']['plan_id'];
        };
        FeaturePlan: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: int64
             * @description The ID of the plan that the feature is associated.
             * @example 1234
             */
            plan_id?: string;
            /**
             * @description The value associated with the feature.
             * @example 25k
             */
            value?: string | null;
        };
        /** @description Represents an installation of a product on a site. For WordPress products (themes, plugins) it can or cannot have a license. For SaaS or downloadable software, it would always have a license. Please see license activation for more information. */
        Install: {
            /**
             * @description The secret key associated with the entity for authorization.
             * @example sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            secret_key?: string;
            /**
             * @description The public key associated with the entity for authorization.
             * @example pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            public_key?: string;
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: int64
             * @description The ID of the site.
             * @example 1234
             */
            site_id?: string;
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            user_id?: components['schemas']['CommonProperties']['user_id'];
            /**
             * @description The site URL.
             * @example https://example.com
             */
            url?: string | null;
            /**
             * @description The site title.
             * @example Catwalk Designs
             */
            title?: string | null;
            /**
             * @description The Product version.
             * @example 1.0.0
             */
            version?: string;
            /**
             * Format: int64
             * @description The ID of the plan associated with the product that the install has a license activation. If `null` it means the install is using the free plan.
             * @example 1234
             */
            plan_id?: string;
            license_id?: components['schemas']['CommonProperties']['license_id_nullable'];
            /**
             * Format: int64
             * @description The ID of the trial license associated to the product. If this is not a trial, this will be `null`.
             * @example 1234
             */
            trial_plan_id?: string;
            /**
             * Format: date-time
             * @description The product trial license expiry date. If this is not a trial, this will be null.
             * @example 2025-01-01 00:00:00
             */
            trial_ends?: string | null;
            subscription_id?: components['schemas']['CommonProperties']['subscription_id_nullable'];
            /**
             * Format: float
             * @description The gross amount the install has spent on the product. This includes one time purchase, or subscriptions and renewals.
             * @example 100
             */
            gross?: number;
            country_code?: components['schemas']['CommonProperties']['country_code_nullable'];
            /**
             * @description The language specified for the product install.
             * @example en-GB
             */
            language?: string | null;
            /**
             * @description The platform version (e.g WordPress version).
             * @example 1.0.0
             */
            platform_version?: string | null;
            /**
             * @description The Freemius SDK version. Only relevant for WordPress products using the Freemius [WP SDK](https://freemius.com/help/documentation/wordpress-sdk/).
             * @example 1.2.2
             */
            sdk_version?: string | null;
            /**
             * @description The programming language version (e.g PHP version).
             * @example 5.6
             */
            programming_language_version?: string | null;
            /** @description If the product is actively installed on the site. */
            is_active?: boolean;
            /** @description If the product is disconnected on the site. */
            is_disconnected?: boolean;
            /** @description If the install using the premium code. Relevant only for WP Products. */
            is_premium?: boolean;
            /** @description If the product is uninstalled on the site. */
            is_uninstalled?: boolean;
            /** @description If the product is locked on the site. */
            is_locked?: boolean;
            source?: components['schemas']['Migration']['source'];
            /**
             * Format: date-time
             * @description Time when the product was upgraded to the current version. If never upgraded since the initial installation, this will be `null`.
             * @example 2025-01-01 00:00:00
             */
            upgraded?: string | null;
            /**
             * Format: date-time
             * @description The last time the product was used on the site.
             * @example 2025-01-01 00:00:00
             */
            last_seen_at?: string | null;
            /**
             * @description The last product version update used on the site. If not updated, this will be null.
             * @example 1.2.2
             */
            last_served_update_version?: string | null;
        };
        /** @description Represents the relation between an install and its clone. These entities are usually created when a user clones the site in staging or locally. */
        InstallClone: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            install_id?: components['schemas']['CommonProperties']['install_id'];
            /**
             * Format: int64
             * @description The ID of the newly created cloned `Install`.
             * @example 1234
             */
            new_install_id?: string | null;
            /**
             * @description The install's URL (install.url) when the clone was identified.
             * @example https://example.com
             */
            install_url?: string;
            /**
             * @description The URL of the site where the clone was identified.
             * @example https://staging.example.com
             */
            site_url?: string;
            /**
             * @description The state of the clone.
             * @enum {string}
             */
            state?: 'pending' | 'resolved';
            /**
             * @description The resolution or purpose of the clone site.
             * @enum {string|null}
             */
            resolution?: 'temporary_duplicate' | 'new_home' | 'long_term_duplicate' | null;
        };
        InstallMetadata: {
            permissions?: {
                /** @description Whether the site level tracking is on, for example the site title, URL, language etc. */
                site?: boolean;
                /** @description Whether the user level tracking is on, for example the user email, first and last name, etc. */
                user?: boolean;
                /** @description Whether the extensions tracking is on (for example list of plugins and themes installed on the same WordPress website). */
                extensions?: boolean;
            };
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            install_id?: components['schemas']['CommonProperties']['install_id'];
        };
        /** @description A license represents authorization to use available features of the product. */
        License: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            user_id?: components['schemas']['CommonProperties']['user_id_nullable'];
            plan_id?: components['schemas']['CommonProperties']['plan_id'];
            pricing_id?: components['schemas']['CommonProperties']['pricing_id_nullable'];
            /**
             * @description The maximum number of license activations. If `null` then the license will support unlimited activations.
             * @example 10
             */
            quota?: number | null;
            /**
             * @description The total number of production activation the license has. This does not count local or staging environment activations.
             * @example 1
             */
            activated?: number;
            /**
             * @description The number of times the license is activated on local or staging environments.
             * @example 1
             */
            activated_local?: number | null;
            /**
             * Format: date-time
             * @description The expiration date of the license. If `null` then it's a lifetime license.
             * @example 2025-12-31 23:59:59
             */
            expiration?: string | null;
            /**
             * @description The license key. This is used for activating the license on the user's site.
             * @example sk_123FGqM456Pa786WtOp%^+67Y+;sXXz
             */
            secret_key?: string;
            /**
             * @description Whether the license offers unlimited local or staging environment activations.
             * @default true
             */
            is_free_localhost: boolean;
            /**
             * @description Whether to block features after expiration of the license. If set to `false`, this would not block features, would only block updates.
             * @default true
             */
            is_block_features: boolean;
            /** @description If the license is canceled from the Developer Dashboard. */
            is_cancelled?: boolean;
            /** @description Guide the [Freemius WP SDK](https://github.com/Freemius/wordpress-sdk) when the product should be running in a [white-label](https://freemius.com/help/documentation/users-account-management/license-security/#white_label_mode) mode. */
            is_whitelabeled?: boolean;
            environment?: components['schemas']['CommonProperties']['environment'];
            source?: components['schemas']['Migration']['source'];
        };
        /** @description A license associated with a subscription or a bundle. */
        LicenseEnriched: components['schemas']['License'] & {
            /** @description The ID of the associated bundle license (**Only** available when `enriched` option is set). */
            parent_plan_id?: number;
            /**
             * Format: date-time
             * @description The end date of a trial subscription (**Only** available when `enriched` option is set).
             * @example 2021-01-01 00:00:00
             */
            trial_ends?: string;
            /**
             * Format: int64
             * @description The ID of the associated subscription (**Only** available when `enriched` option is set).
             * @example 1234
             */
            subscription_id?: string;
            /**
             * Format: float
             * @description The total gross price associated with the subscription (**Only** available when `enriched` option is set).
             * @example 102.34
             */
            subscription_total_gross?: number;
            /**
             * Format: float
             * @description The initial amount associated with the subscription (**Only** available when `enriched` option is set).
             * @example 105.99
             */
            subscription_initial_amount?: number;
            /**
             * @description The payment gateway associated with the subscription (**Only** available when `enriched` option is set).
             * @example stripe
             * @enum {string}
             */
            subscription_gateway?: 'paypal' | 'stripe' | 'test';
            /**
             * @description The number of failed payments associated with the subscription (**Only** available when `enriched` option is set).
             * @example 2
             */
            subscription_failed_payments?: number;
            /**
             * Format: date-time
             * @description The renewal date of the subscription (**Only** available when `enriched` option is set).
             * @example 2025-01-01 00:00:00
             */
            next_payment?: string | null;
            /**
             * Format: int64
             * @description The ID of the associated bundle license. This will be populated only when the license is associated with a parent license from a bundle (**Only** available when `enriched` option is set).
             * @example 1234
             */
            parent_license_id?: string;
            /**
             * Format: int64
             * @description The ID of the bundle that is associated with the parent license (**Only** available when `enriched` option is set).
             * @example 1234
             */
            parent_license_bundle_id?: string;
            /**
             * @description The title of the plan associated with the bundle (**Only** available when `enriched` option is set).
             * @example Agency
             */
            parent_plan_title?: string | null;
            /**
             * @description The slug of the plan associated with the bundle (**Only** available when `enriched` option is set).
             * @example agency
             */
            parent_plan_name?: string | null;
        };
        /** @description Represents a product from the market, not necessarily powered by Freemius. For WordPress product this usually represents a themes or plugins installed in the same site as the Freemius powered product. Only after the user chooses to opt-in, such data is collected and sent to Freemius. */
        MarketItem: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id_nullable'];
            /**
             * @description Product slug name.
             * @example catwalk-reviews
             */
            slug?: string;
            /**
             * @description Products name.
             * @example Catwalk Reviews
             */
            title?: string;
            /**
             * @description The business model of the product. We can only detect the model if the product is also integrated with Freemius.
             * @default free
             * @enum {string}
             */
            model: 'free' | 'premium' | 'freemium';
            /**
             * @description The type of the product. Right now we only support WordPress products, i.e, plugins and themes.
             * @default plugin
             * @enum {string}
             */
            type: 'plugin' | 'theme';
            /**
             * @description The number of product downloads.
             *
             *     > We are not updating this field yet. We plan to do it in the future.
             * @example 1000
             */
            downloads?: number;
            /**
             * @description The number of product installs.
             *
             *     > We are not updating this field yet. We plan to do it in the future.
             * @example 1000
             */
            installs_count?: number;
            /**
             * Format: date-time
             * @description The date of the last product release/update.
             *
             *     > We are not updating this field yet. We plan to do it in the future.
             * @example 2025-01-01 00:00:00
             */
            last_release?: string;
            /**
             * @description The version number of the latest release/update.
             * @example 1.0.0
             */
            newest_version?: string;
        };
        Member: components['schemas']['Developer'] & {
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * @description The user role assigned to the team member.
             * @enum {string}
             */
            role?: 'admin' | 'developer' | 'support' | 'accountant';
        };
        /** @description A written remark that provides additional context, clarification, or explanation related to a specific record. */
        Note: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * @description The ID of the scope entity that this note is associated with.
             * @example 12345
             */
            scope_entity_id?: number;
            /**
             * @description The type of the scope entity that this note is associated with.
             * @enum {string}
             */
            scope_entity_type?: 'plugin' | 'store';
            /**
             * @description The ID of the entity that this note is associated with.
             * @example 12345
             */
            entity_id?: number;
            /**
             * @description The type of the entity that this note is associated with.
             * @enum {string}
             */
            entity_type?: 'coupon' | 'user' | 'payment' | 'subscription' | 'license';
            /**
             * @description The note.
             * @example This is a note
             */
            note?: string;
        };
        /** @description An acknowledgement of a payment recevied for the following cases:
         *     - Initial payment of a subscription.
         *     - Renewal payment of a subscription.
         *     - One-time payment for a product.
         *
         *     Along with refunds, disputes, chargebacks etc. */
        Payment: {
            user_id?: components['schemas']['CommonProperties']['user_id'];
            install_id?: components['schemas']['CommonProperties']['install_id_nullable'];
            plan_id?: components['schemas']['CommonProperties']['plan_id'];
            pricing_id?: components['schemas']['CommonProperties']['pricing_id_nullable'];
            license_id?: components['schemas']['CommonProperties']['license_id'];
            ip?: components['schemas']['CommonProperties']['ip_nullable'];
            country_code?: components['schemas']['CommonProperties']['country_code'];
            zip_postal_code?: components['schemas']['CommonProperties']['zip_postal_code_nullable'];
            vat_id?: components['schemas']['CommonProperties']['vat_id_nullable'];
            coupon_id?: components['schemas']['CommonProperties']['coupon_id_nullable'];
            /**
             * Format: int64
             * @description The ID of the user card that was used for this payment.
             * @example 12345
             */
            user_card_id?: string;
            source?: components['schemas']['Migration']['source'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * @description The external ID of the gateway entity.
             * @example abcde12345
             */
            external_id?: string;
            /** @description The gateway used for the purchase. The gateway will be set to `null` when purchasing a product with a 100% discount. */
            gateway?: string | null;
            environment?: components['schemas']['CommonProperties']['environment'];
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            currency?: components['schemas']['CommonEnums']['Currency'];
            /** @example Refunded due to a bug in the plugin. */
            refund_reason?: string | null;
            subscription_id?: components['schemas']['CommonProperties']['subscription_id_nullable'];
            /**
             * Format: float
             * @description The payment amount (not including taxes).
             * @example 2075.45
             */
            gross?: number;
            /**
             * Format: int64
             * @description The ID of the payment that this payment is bound to, in case of a refund or chargeback/dispute.
             * @example 123456
             */
            bound_payment_id?: string;
            /**
             * Format: float
             * @description The fee that the gateway took for processing this payment.
             * @default 0
             * @example 2.99
             */
            gateway_fee: number;
            vat?: components['schemas']['CommonProperties']['vat'];
            /**
             * @description If the payment is a renewal.
             * @default false
             */
            is_renewal: boolean;
            type?: components['schemas']['CommonEnums']['PaymentType'];
        };
        /** @description A plan defines the features available to the users. It can have different set of pricing per billing cycle, quota, currency etc. */
        Plan: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * Format: slug
             * @description The name of the plan. Only lowercase characters allowed.
             * @example professional
             */
            name?: string;
            /**
             * @description The title of the plan. This is the human readable name of the plan. Please do not add the suffix `Plan` to the title, as Freemius does that for you at various places.
             * @example Professional
             */
            title?: string;
            /**
             * @description The description of the plan.
             * @example For small to medium businesses.
             */
            description?: string | null;
            /**
             * @description Whether the plan offers unlimited local or staging activations with the same license.
             * @default true
             */
            is_free_localhost: boolean;
            /**
             * @description Whether to block features on expiration of **annual** licenses. If `false`, does not block features but only block updates and support.
             * @default true
             */
            is_block_features: boolean;
            /**
             * @description Whether to block particular features on expiration of **monthly** licenses. If `false`, does not block features but only block updates and support.
             * @default true
             */
            is_block_features_monthly: boolean;
            /**
             * @description The type of the license. `0` for per domain license. `1` for per subdomain license.
             * @default 0
             * @enum {integer}
             */
            license_type: 0 | 1;
            /**
             * @description The number of days a trial period will last. If `null` the plan does not support trials.
             * @example 14
             */
            trial_period?: number | null;
            /** @description Whether to require a subscription payment for the trial period. */
            is_require_subscription?: boolean;
            /**
             * @description The Knowledge Base URL.
             * @example https://example.com/help/documentation
             */
            support_kb?: string | null;
            /**
             * @description The support Forum URL.
             * @example https://example.com/support
             */
            support_forum?: string | null;
            /**
             * @description The support email address.
             * @example support@example.com
             */
            support_email?: string | null;
            /**
             * @description The support phone contact.
             * @example 555-555-5555
             */
            support_phone?: string | null;
            /** @description Is a personal success manager allocated with the plan. */
            is_success_manager?: boolean;
            /** @description Whether this is a featured plan. */
            is_featured?: boolean;
            /** @description Whether to hide the plan from the auto-generated pricing page. Mostly relevant for WordPress products and our WordPress SDK. Please see our [pricing-page](https://github.com/Freemius/pricing-page/) library to implement your own. */
            is_hidden?: boolean;
        };
        /**
         * Product
         * @description A **product** is a software that is being sold on Freemius. It can be a WordPress plugin, theme, SaaS, or any other software that is being sold on Freemius.
         */
        Plugin: {
            /**
             * @description The secret key associated with the entity for authorization.
             * @example sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            secret_key?: string;
            /**
             * @description The public key associated with the entity for authorization.
             * @example pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            public_key?: string;
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: int64
             * @description If the product is an add-on then this is the ID of the parent product.
             * @example 123456
             */
            parent_plugin_id?: string | null;
            /**
             * Format: int64
             * @description The ID of the developer that owns the product.
             * @example 123456
             */
            developer_id?: string;
            /**
             * Format: int64
             * @description The ID of the store that the product is being sold on.
             * @example 123456
             */
            store_id?: string;
            /**
             * @description The `slug` of the product. If your plugin is listed on `WordPress.org` repository, use the exact slug.
             * @example my-freemius-plugin
             */
            slug?: string;
            /**
             * @description The title of the product.
             * @example My Freemius Plugin
             */
            title?: string;
            environment?: components['schemas']['CommonProperties']['environment'];
            /**
             * @description Product's icon (profile picture).
             * @example https://img.freemius.com/plugin-icon-blue.png
             */
            icon?: string | null;
            /**
             * Format: int64
             * @description Default plan ID of the product.
             */
            default_plan_id?: string;
            /**
             * @description Comma separated, ordered plans collection.
             * @example 123456,123457,123458
             */
            plans?: string;
            /**
             * @description Comma separated, ordered features collection.
             * @example 123456,123457,123458
             */
            features?: string;
            /** @description Money-back guarantee in days. */
            money_back_period?: number;
            refund_policy?: components['schemas']['CommonEnums']['RefundPolicy'];
            /** @description Renewals discount that will be applied to the chosen plan. */
            annual_renewals_discount?: number | null;
            renewals_discount_type?: components['schemas']['CommonEnums']['RenewalsDiscountType'];
            /** @description A flag that controls the visibility of add-ons in the in-dashboard add-ons marketplace. Defaults to true. Only applicable if the product is an add-on. */
            is_released?: boolean;
            /** @description A flag that controls whether the SDK should be required or not during deployment of a version. It defaults to `true`. */
            is_sdk_required?: boolean;
            /** @description Determines if the pricing should be visible in the in-SDK pricing page. Defaults to true. Turn this off during the development of a new product. */
            is_pricing_visible?: boolean;
            /** @description Set to true if the free version of the module is hosted on WordPress.org. Defaults to true. */
            is_wp_org_compliant?: boolean;
            /** @description Total number of opted in sites which were logged with the SDK. */
            installs_count?: number;
            /** @description Total number of active sites where the SDK is active. */
            active_installs_count?: number;
            /** @description The number of "free" version of the product that were deployed from Freemius. */
            free_releases_count?: number;
            /** @description The number of "premium" version of the product that were deployed from Freemius. */
            premium_releases_count?: number;
            /** @description Total number of payments recorded for the product. */
            total_purchases?: number;
            /** @description Total number of subscriptions recorded for the product. */
            total_subscriptions?: number;
            /** @description Total number of renewals recorded for the product. */
            total_renewals?: number;
            /**
             * @description Total number of failed payments recorded for the product.
             * @example 1234
             */
            total_failed_purchases?: number;
            /**
             * Format: float
             * @description Total gross revenues.
             * @example 1234.56
             */
            earnings?: number;
            type?: components['schemas']['CommonEnums']['ProductType'];
            /** @description Determines whether the product is categorized as a static product (for example, a widget or a template). */
            is_static?: boolean;
        };
        /**
         * ProductEmailAddress
         * @description Represents the email address setup associated with the product.
         */
        PluginEmailAddress: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            store_id?: components['parameters']['store_id'];
            /**
             * @description The general system email address.
             * @example foo@example.com
             */
            general?: string | null;
            /**
             * @description The label to the general system email address.
             * @example Company Support
             */
            general_name?: string | null;
            /**
             * @description The do-not-reply email address.
             * @example donotreply@example.com
             */
            dont_reply?: string | null;
            /**
             * @description The label to the do-not-reply email address.
             * @example Do Not Reply
             */
            dont_reply_name?: string | null;
            /**
             * @description The personal assistance email address.
             * @example personalmanager@example.com
             */
            personal?: string | null;
            /**
             * @description The label to the personal assistance email address.
             * @example John Doe
             */
            personal_name?: string | null;
            /**
             * @description The technical support representative email address.
             * @example techsupport@example.com
             */
            personal_technical?: string | null;
            /**
             * @description The label to the technical support representative email address.
             * @example Tech Support
             */
            personal_technical_name?: string | null;
            /**
             * @description The happiness representative email address.
             * @example support@example.com
             */
            personal_setup?: string | null;
            /**
             * @description The label to the happiness representative email address.
             * @example Support
             */
            personal_setup_name?: string | null;
            /**
             * @description The general support email address.
             * @example support@example.com
             */
            support?: string | null;
            /**
             * @description The label to the general support email address.
             * @example Support
             */
            support_name?: string | null;
        };
        /**
         * ProductInfo
         * @description The basic information about a product.
         */
        PluginInfo: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            url?: components['schemas']['CommonProperties']['url'];
            /**
             * @description The description of the product.
             * @example Calculate profits for small to medium businesses. This product is a must-have for any business owner who intends to view the profits of their business.
             */
            description?: string;
            /**
             * @description The short description of the product.
             * @example Calculate profits for small to medium businesses.
             */
            short_description?: string;
            banner_url?: components['schemas']['CommonProperties']['url'];
            card_banner_url?: components['schemas']['CommonProperties']['url'];
            /**
             * @description The selling point one of the product.
             * @example Ability to use stunning feature x.
             */
            selling_point_0?: string;
            /**
             * @description The selling point two of the product.
             * @example Ability to use stunning feature y.
             */
            selling_point_1?: string;
            /**
             * @description The selling point three of the product.
             * @example Ability to use stunning feature z.
             */
            selling_point_2?: string;
            /**
             * @description The URLs of the product screenshot.
             * @example {
             *       "screenshot_0": "https://exmaple.com/",
             *       "screenshot_1": "https://exmaple.com/",
             *       "screenshot_2": "https://exmaple.com/",
             *       "screenshot_3": "https://exmaple.com/"
             *     }
             */
            screenshots?: {
                [key: string]: unknown;
            };
        };
        /**
         * ProductReview
         * @description Represents a customer's opinion after using a product. It can be generated by a real user or a developer. The review can be featured on the pricing page.
         */
        PluginReview: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /** @description The external ID of the review (in case migrating from another system). */
            external_id?: string;
            user_id?: components['schemas']['CommonProperties']['user_id_nullable'];
            /**
             * @description The score of the review.
             * @example 80
             */
            rate?: number;
            /**
             * @description The title of the review.
             * @example Great plugin! It works perfectly.
             */
            title?: string;
            /**
             * @description The content of the review.
             * @example I love this plugin! It has all the features I need and more. The support team is also very responsive and helpful. Highly recommend!
             */
            text?: string;
            /**
             * @description The full name of the reviewer.
             * @example John Doe
             */
            name?: string;
            /**
             * @description The job title of the reviewer.
             * @example Software Engineer
             */
            job_title?: string;
            /**
             * @description The company name of the reviewer.
             * @example Example Software Inc.
             */
            company?: string;
            company_url?: components['schemas']['CommonProperties']['url'];
            picture?: components['schemas']['CommonProperties']['icon'];
            /**
             * @description The URL of the reviewer's profile.
             * @example https://example.com/profile
             */
            profile_url?: string;
            license_id?: components['schemas']['CommonProperties']['license_id'];
            /**
             * @description Whether this is a genuine review generated by a real user.
             * @default true
             */
            is_verified: boolean;
            /**
             * @description Whether the review should be included in marketing material (e.g. pricing page).
             * @default false
             */
            is_featured: boolean;
        };
        /**
         * ProductTag
         * @description A product tag represents a version of the product that is available for download by users.
         */
        PluginTag: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * Format: int64
             * @description The ID of a developer.
             * @example 1234
             */
            developer_id?: string;
            /**
             * @description The `slug` of the product. This is auto-generated from your product settings.
             * @example my-freemius-plugin
             */
            slug?: string | null;
            /**
             * @description The `slug` of the premium product. This is auto-generated from your product's settings.
             * @example my-freemius-plugin-pro
             */
            premium_slug?: string | null;
            /**
             * Format: semver
             * @description The version of the product. For WordPress.org products (plugins and themes), we recommend using semver semantics to support composer integration.
             * @example 1.0.0
             */
            version?: string;
            /**
             * @description The Freemius SDK version. Only relevant for WordPress products using the Freemius [WP SDK](https://freemius.com/help/documentation/wordpress-sdk/).
             * @example 1.2.2
             */
            sdk_version?: string;
            /**
             * @description The platform version required (e.g WordPress version).
             * @example 1.0.0
             */
            requires_platform_version?: string | null;
            /**
             * @description The programming language version (e.g PHP version).
             * @example 5.6
             */
            requires_programming_language_version?: string | null;
            /**
             * @description The tested platform version that the product is compatible (e.g WordPress version).
             * @example 1.0.0
             */
            tested_up_to_version?: string | null;
            /**
             * @description The number of times the product has been downloaded.
             * @example 1234
             */
            downloaded?: number;
            /** @description If the product has a free version. */
            has_free?: boolean;
            /** @description If the product has a premium version. */
            has_premium?: boolean;
            /**
             * @description The release mode of the product.
             * @enum {string}
             */
            release_mode?: 'released' | 'pending' | 'beta';
            /**
             * @description The maximum number of downloads allowed for this version. This is used for [staged rollout](https://freemius.com/help/documentation/release-management/staged-rollouts/) of WordPress products. Unlimited number is set as `null`.
             * @example 50
             */
            limit?: number;
            /**
             * @description The number of unique users that have downloaded the product.
             * @example 1234
             */
            uniques?: number;
            /**
             * @description Determines whether the version is incremental or not.
             * @example true
             */
            is_incremental?: boolean;
        };
        /** @description The pricing represents the cost of a quota and billing cycles of a plan. */
        Pricing: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            currency?: components['schemas']['CommonEnums']['Currency'];
            /**
             * Format: int64
             * @description The ID of the plan.
             * @example 1234
             */
            plan_id?: string;
            /**
             * @description The number of activations or quota supported by the license that will be created through the pricing (Using [Freemius Checkout](https://freemius.com/help/documentation/selling-with-freemius/freemius-checkout-buy-button/)). Use `null` for unlimited activations or quota.
             * @example 10
             */
            licenses?: number | null;
            /**
             * Format: float
             * @description The price for a single month.
             * @example 59.99
             */
            monthly_price?: number | null;
            /**
             * Format: float
             * @description The price for one year.
             * @example 159.99
             */
            annual_price?: number | null;
            /**
             * Format: float
             * @description The lifetime price.
             * @example 359.99
             */
            lifetime_price?: number | null;
            /** @description Whether to [whitelabel](https://freemius.com/help/documentation/users-account-management/license-security/#white_label_mode) the license that will be created from this pricing upon successful Checkout. */
            is_whitelabeled?: boolean;
            /** @description Whether to hide the pricing from checkout and the pricing page in the WP dashboard. */
            is_hidden?: boolean;
        };
        /** @description Settings associated with an element. */
        Setting: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /** @description The type of the setting. */
            setting_type?: number;
            /**
             * Format: int64
             * @description The ID of the element the setting is associated with.
             * @example 1234
             */
            element_id?: string;
            /** @description The type of the element. It is unique for each entity type. */
            element_type?: number;
            /**
             * Format: json
             * @description JSON encoded data of the settings.
             * @example {"key":"value"}
             */
            data?: string;
        };
        /** @description A subscription is created when a user uses [Freemius Checkout](https://freemius.com/wordpress/checkout/) to purchase or subscribe to a plan of a product. */
        Subscription: {
            user_id?: components['schemas']['CommonProperties']['user_id'];
            install_id?: components['schemas']['CommonProperties']['install_id_nullable'];
            plan_id?: components['schemas']['CommonProperties']['plan_id'];
            pricing_id?: components['schemas']['CommonProperties']['pricing_id_nullable'];
            license_id?: components['schemas']['CommonProperties']['license_id'];
            ip?: components['schemas']['CommonProperties']['ip_nullable'];
            country_code?: components['schemas']['CommonProperties']['country_code'];
            zip_postal_code?: components['schemas']['CommonProperties']['zip_postal_code_nullable'];
            vat_id?: components['schemas']['CommonProperties']['vat_id_nullable'];
            coupon_id?: components['schemas']['CommonProperties']['coupon_id_nullable'];
            /**
             * Format: int64
             * @description The ID of the user card that was used for this payment.
             * @example 12345
             */
            user_card_id?: string;
            source?: components['schemas']['Migration']['source'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * @description The external ID of the gateway entity.
             * @example abcde12345
             */
            external_id?: string;
            /** @description The gateway used for the purchase. The gateway will be set to `null` when purchasing a product with a 100% discount. */
            gateway?: string | null;
            environment?: components['schemas']['CommonProperties']['environment'];
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            currency?: components['schemas']['CommonEnums']['Currency'];
            /**
             * Format: float
             * @description The tax rate as a fraction. It will either be US sales tax or VAT.
             * @example 1.00
             */
            tax_rate?: number;
            /**
             * Format: float
             * @description The total gross amount of the subscription, including taxes.
             * @example 1.21
             */
            total_gross?: number;
            /**
             * Format: float
             * @description The plan's original amount per cycle (not including taxes).
             * @example 1.00
             */
            amount_per_cycle?: number;
            /**
             * Format: float
             * @description The initial payment amount (not including taxes).
             * @example 1.00
             */
            initial_amount?: number;
            /**
             * Format: float
             * @description The renewals amount (not including taxes).
             * @example 1.00
             */
            renewal_amount?: number;
            /**
             * @description The renewals discount that will be applied to the chosen plan.
             * @example 1
             */
            renewals_discount?: number;
            renewals_discount_type?: components['schemas']['CommonEnums']['RenewalsDiscountType'];
            billing_cycle?: components['schemas']['CommonEnums']['BillingCycle'];
            /**
             * Format: float
             * @description Any outstanding balance that the user has for this subscription.
             * @example 1.00
             */
            outstanding_balance?: number;
            /**
             * @description Number of failed payments associated with the subscription.
             * @example 1
             */
            failed_payments?: number;
            /**
             * Format: date-time
             * @description The date time when the trial period ends. If `null` the subscription is not associated with a trial.
             * @example 2025-01-01 00:00:00
             */
            trial_ends?: string | null;
            /**
             * Format: date-time
             * @description Datetime of the next payment, or `null` if cancelled.
             * @example 2025-01-01 00:00:00
             */
            next_payment?: string | null;
            /**
             * Format: date-time
             * @description Datetime of the cancellation.
             * @example 2025-01-01 00:00:00
             */
            canceled_at?: string | null;
        };
        /** @description A trial represents a user's trial period for a product. Please read our [documentation](https://freemius.com/help/documentation/selling-with-freemius/free-trials/) to learn more about trials. */
        Trial: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            user_id?: components['schemas']['CommonProperties']['user_id'];
            payment_id?: components['schemas']['CommonProperties']['payment_id_nullable'];
            subscription_id?: components['schemas']['CommonProperties']['subscription_id_nullable'];
            license_id?: components['schemas']['CommonProperties']['license_id_nullable'];
            /**
             * Format: date-time
             * @description The date and time the trial ends, under UTC timezone.
             * @example 2025-01-01 00:00:00
             */
            trial_ends_at?: string;
            /** @description Whether the trial was created with a payment method. Freemius supports both free and paid trials. */
            with_payment_method?: boolean;
            /**
             * Format: date-time
             * @description The date and time the trial was cancelled, under UTC timezone. If `null` the trial has not been cancelled.
             * @example 2025-01-01 00:00:00
             */
            canceled_at?: string | null;
            /**
             * Format: date-time
             * @description The date and time the trial was converted to a paid subscription or one-time purchase, under UTC timezone.
             *     If `null` the trial has not been converted.
             * @example 2025-01-01 00:00:00
             */
            converted_at?: string | null;
            environment?: components['schemas']['CommonProperties']['environment'];
        };
        /** @description An uninstall represents a user uninstalling a product from their site. This is different from deleting. */
        Uninstall: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            install_id?: components['schemas']['CommonProperties']['install_id'];
            /**
             * Format: int64
             * @description The ID of the site.
             * @example 1234
             */
            site_id?: string;
            /**
             * @description
             *     Uninstall reason. Possible values:
             *
             *     * `1` - No longer needed
             *     * `2` - Found a better alternative
             *     * `3` - Only needed for short period
             *     * `4` - Broke the website
             *     * `5` - Suddenly stopped working
             *     * `6` - Cannot continue paying
             *     * `7` - Other
             *     * `8` - Didn't work after installation
             *     * `9` - User doesn't like to share data
             *     * `10` - Didn't understand how it works
             *     * `11` - Missing specific feature
             *     * `12` - Didn't work
             *     * `13` - Expected something else
             *     * `14` - Expected to work differently
             *     * `15` - Temporary deactivation
             *
             * @example 1
             * @enum {integer}
             */
            reason_id?: 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15;
            /** @description Additional information gathered from the user for the uninstallation. This is populated when the product user chooses “Other” in contrast to pre-set options. */
            reason_info?: string;
        };
        /** @description A **User** is a person who is registered to Freemius through some usage of one or more products selling through Freemius. The user could own licenses of such products or simply could have been linked to the Free version of the products. Every user has unique email address. */
        User: {
            /** @description A note about the user. Only visible to the developer. */
            note?: string;
            /** @description Whether or not the user has given their consent for marketing materials. A `null` value indicates that the user has not made a decision yet. */
            is_marketing_allowed?: boolean | null;
            /** @description Whether or not the user has opted-in to beta versions. We do not recommend using this option anymore since it will opt-in the user to all sites/activations. Currently, sites or activations can be managed individually. */
            is_beta?: boolean;
            /**
             * @description Email address of the person.
             * @example jane@example.com
             */
            email?: string;
            /**
             * @description First name of the person.
             * @example Jane
             */
            first?: string;
            /**
             * @description Last name of the person.
             * @example Doe
             */
            last?: string;
            /**
             * @description Profile picture URL.
             * @example https://example.com/profile-pic.jpg
             */
            picture?: string;
            /**
             * Format: ipv4|ipv6
             * @description The IP address (v4 or v6).
             * @example 127.0.0.1
             */
            ip?: string | null;
            /**
             * @description Whether the person is trusted or not.
             * @example true
             */
            is_verified?: boolean;
            auth?: components['schemas']['CommonEnums']['AuthenticationType'];
            /**
             * @description The secret key associated with the entity for authorization.
             * @example sk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            secret_key?: string;
            /**
             * @description The public key associated with the entity for authorization.
             * @example pk_a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6
             */
            public_key?: string;
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            /**
             * Format: float
             * @description The total amount of money the user has spent on the platform.
             */
            gross?: number;
            /**
             * Format: date-time
             * @description Date and time of the last login.
             * @example 2025-07-30 05:56:29
             */
            last_login_at?: string | null;
            email_status?: components['schemas']['CommonEnums']['EmailStatus'];
        };
        UserPluginEnriched: components['schemas']['User'] & {
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            user_id?: components['schemas']['CommonProperties']['user_id'];
            /**
             * Format: float
             * @description Gross payments made by the user for the product
             * @example 999
             */
            gross?: number;
            /** @description Whether the user has consented for marketing notifications. */
            is_marketing_allowed?: boolean;
        };
        /** @description An affiliate is individual or businesses that promotes and sells products or services in exchange for a commission on each sale. */
        Affiliate: {
            id?: components['schemas']['CommonProperties']['id'];
            created?: components['schemas']['CommonProperties']['created'];
            updated?: components['schemas']['CommonProperties']['updated'];
            user_id?: components['schemas']['CommonProperties']['user_id'];
            ip?: components['schemas']['CommonProperties']['ip'];
            /**
             * @description The PayPal email for payout purposes.
             * @example foo@freemius.com
             */
            paypal_email?: string;
            plugin_id?: components['schemas']['CommonProperties']['plugin_id'];
            /**
             * Format: int64
             * @description The ID of the affiliate terms.
             * @example 1234
             */
            affiliate_terms_id?: string;
            /**
             * Format: int64
             * @description The ID of the custom affiliate terms.
             * @example 1234
             */
            custom_affiliate_terms_id?: string;
            /** @description Whether the affiliate is using custom terms. */
            is_using_custom_terms?: boolean;
            /**
             * @description The status of the affiliate signup.
             * @default \Freemius\Entities\Affiliation\Affiliate::STATE_PENDING
             * @enum {string}
             */
            status: 'pending' | 'rejected' | 'suspended' | 'active';
            /**
             * @description The domain of the affiliate.
             * @example https://awesome-products.com
             */
            domain?: string;
            /**
             * Format: float
             * @description The earnings of the affiliate from sales.
             * @example 2000.45
             */
            earnings?: number;
            /**
             * @description The number of unapproved/pending referrals.
             * @example 1234
             */
            pending_referrals?: number;
            /**
             * @description The number of visits through the affiliate link.
             * @example 1234
             */
            visits?: number;
            /**
             * @description The number of unique visits through the affiliate link.
             * @example 1234
             */
            unique_visits?: number;
        };
        AuthToken: {
            /**
             * @description The access token that our API or general infrastructure will accept.
             * @example 1234567890abcdef1234567890abcdef
             */
            access?: string;
            /**
             * @description The expiration time of the access token in timestamp.
             * @example 1234567890
             */
            expires?: number;
            /**
             * @deprecated
             * @description The refresh token which can be used to generate a new access token. We don't support creating access tokens with refresh tokens anymore. For API communication please use the Bearer token.
             * @example "1234567890abcdef1234567890abcdef"
             */
            refresh?: string;
        };
        /** @description The key represents the ID of the plan */
        FSEndpointDeveloperPluginPricing: {
            /** @description Monthly pricing in different currencies */
            monthly_price?: {
                /**
                 * Format: float
                 * @example 9.99
                 */
                usd?: number;
                /**
                 * Format: float
                 * @example 7.99
                 */
                gbp?: number;
                /**
                 * Format: float
                 * @example 8.99
                 */
                eur?: number;
            };
            /** @description Annual pricing in different currencies */
            annual_price?: {
                /**
                 * Format: float
                 * @example 99.99
                 */
                usd?: number;
                /**
                 * Format: float
                 * @example 79.99
                 */
                gbp?: number;
                /**
                 * Format: float
                 * @example 89.99
                 */
                eur?: number;
            };
            /** @description Lifetime pricing in different currencies */
            lifetime_price?: {
                /**
                 * Format: float
                 * @example 299.99
                 */
                usd?: number;
                /**
                 * Format: float
                 * @example 249.99
                 */
                gbp?: number;
                /**
                 * Format: float
                 * @example 279.99
                 */
                eur?: number;
            };
        };
    };
    responses: {
        /** @description The API has no content to send. This usually happens when some entity is deleted. */
        204: {
            headers: {
                [name: string]: unknown;
            };
            content?: never;
        };
        /** @description Bad request. The request could not be understood by the server due to malformed syntax or arguments. */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ApiError'];
            };
        };
        /** @description Unauthorized access error. The request requires [authentication](/api/section/bearer-token-auth/) but was not provided or the provided authentication does not satisfy the required permissions. */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ApiError'];
            };
        };
        /** @description The request is missing the specified argument. */
        402: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ApiError'];
            };
        };
        /** @description The requested resource was not found. */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                'application/json': components['schemas']['ApiError'];
            };
        };
    };
    parameters: {
        /**
         * @description The ID of the developer.
         * @example 1234
         */
        developer_id: number;
        /**
         * @description The ID of the store.
         * @example 1234
         */
        store_id: number;
        /**
         * @description The ID of the product.
         * @example 1234
         */
        plugin_id: number;
        /**
         * @description The ID of the product.
         * @example 1234
         */
        product_id: number;
        /**
         * @description The ID of the bank account.
         * @example 1234
         */
        bank_account_id: number;
        /**
         * @description The ID of the Cart.
         * @example 1234
         */
        cart_id: number;
        /**
         * @description The ID of the setting.
         * @example 1234
         */
        setting_id: number;
        /**
         * @description The ID of the payment.
         * @example 1234
         */
        payment_id: number;
        /**
         * @description The ID of the install.
         * @example 1234
         */
        install_id: number;
        /**
         * @description The ID of the clone.
         * @example 1234
         */
        clone_id: number;
        /**
         * @description The ID of the plan.
         * @example 1234
         */
        plan_id: number;
        /**
         * @description The ID of the License.
         * @example 1234
         */
        license_id: number;
        /**
         * @description The ID of the User.
         * @example 1234
         */
        user_id: number;
        /**
         * @description The ID of the Subscription.
         * @example 1234
         */
        subscription_id: number;
        /**
         * @description The ID of the Pricing.
         * @example 1234
         */
        pricing_id: number;
        /**
         * @description The ID of the Addon.
         * @example 1234
         */
        addon_id: number;
        /**
         * @description The ID of the product version.
         * @example 1234
         */
        tag_id: number;
        /**
         * @description The ID of the coupon.
         * @example 1234
         */
        coupon_id: number;
        /**
         * @description The ID of the special coupon.
         * @example cart_recovery
         */
        special_id:
            | 'affiliate'
            | 'cart_recovery'
            | 'subscription_cancellation'
            | 'exit_intent'
            | 'renewals_discount'
            | 'manual_renewals_discount';
        /**
         * @description The ID of the review.
         * @example 1234
         */
        review_id: number;
        /**
         * @description The ID of the feature.
         * @example 1234
         */
        feature_id: number;
        /**
         * @description The ID of the event.
         * @example 1234
         */
        event_id: number;
        /**
         * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
         * @example id,name,slug
         */
        fields: string;
        /**
         * @description The number of records to return.
         * @example 10
         */
        count: number;
        /**
         * @description The number of records to skip before starting to return records. Default is 0.
         * @example 10
         */
        offset: number;
        /**
         * @description Filter by gateway.
         * @example stripe
         */
        gateway: 'paypal' | 'stripe';
        /**
         * @description The start of the date range in YYYY-MM-DD HH:MM:SS format
         * @example 2025-08-01 00:00:00
         */
        from: string;
        /**
         * @description The end of the date range in YYYY-MM-DD HH:MM:SS format
         * @example 2025-08-01 00:00:00
         */
        to: string;
        /** @description Filter by billing cycle. */
        billing_cycle: components['schemas']['CommonEnums']['BillingCycle'];
        /** @description The Unique identifier. It is a 32 characters long string. */
        uid: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    'developers/retrieve-bank-account': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the bank account.
                 * @example 1234
                 */
                bank_account_id: components['parameters']['bank_account_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['BankAccount'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'developers/log-in': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description Valid email address.
                     * @example jane@freemius.com
                     */
                    email?: string;
                    /** @description Valid password. */
                    password?: string;
                    /** @description reCAPTCHA token. One must use the Developer Dashboard to get the reCAPTCHA token if the login asks for it. */
                    recaptcha_token?: string;
                    /** @description Will set the cookie expiration day to 7 days from the successful login if set to `true`. Otherwise, the cookie will expire in 12 hours. */
                    remember_me?: boolean;
                    /** @description 2FA 6 digits code in case developer's auth mode is using TOTP based 2FA apps. */
                    code?: string;
                    /** @description 2FA backup code (24 chars) to disable and bypass 2FA authentication. */
                    backup_code?: string;
                };
            };
        };
        responses: {
            /** @description Successful login. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        person?: components['schemas']['Developer'];
                        /** @description The expiration time of the cookie in seconds. */
                        expires?: number;
                        /** @description Signal the developer is not new (this is a login, so it must exists), for consistency with the other auth endpoints. */
                        is_new?: boolean;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/list-addons': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description Whether to show released addons only or the hidden as well. */
                show_pending?: boolean;
                /** @description If set to `true`, returns marketing info. */
                enriched?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of all the addons. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        addons?: components['schemas']['Plugin'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'addons/list-plans-features': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all the plan's features for the addon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        features?: components['schemas']['Feature'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'addons/list-plans': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description If set to `true`, retrieves unreleased add-ons as well. */
                show_pending?: boolean;
                /** @description Whether to show released addons only or the hidden as well. */
                type?: 'all' | 'visible';
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of all the plans for the addon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        plans?: components['schemas']['Plan'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'addons/list-pricings': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                currency?: components['schemas']['CommonEnums']['Currency'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of all the plans for the addon. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        plans?: components['schemas']['Pricing'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'carts/retrieve-events': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Cart.
                 * @example 1234
                 */
                cart_id: components['parameters']['cart_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The cart's events collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        events?: components['schemas']['EventLog'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'carts/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description Defaults to false, if true returns enriched cart details. */
                enriched?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Cart.
                 * @example 1234
                 */
                cart_id: components['parameters']['cart_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Cart details associated with the product. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Cart'] & {
                        /**
                         * Format: float
                         * @description Gross amount associated with the cart. (Only available when `enriched` is set to `true`.)
                         * @example 359.64
                         */
                        gross?: number | null;
                        /**
                         * @description Coupon code associated with the cart. (Only available when `enriched` is set to `true`.)
                         * @example BLACKFRIDAY2024
                         */
                        coupon_code?: string | null;
                        /**
                         * @description Number of licenses associated with the cart. (Only available when `enriched` is set to `true`.)
                         * @example 10
                         */
                        licenses?: number | null;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'carts/update': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Cart.
                 * @example 1234
                 */
                cart_id: components['parameters']['cart_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description The Plan ID.
                     * @example 1234
                     */
                    plan_id?: number;
                    pricing_id?: components['schemas']['CommonProperties']['pricing_id'];
                    payment_method?: components['schemas']['CommonEnums']['PaymentMethodType'];
                    billing_cycle?: components['schemas']['CommonEnums']['BillingCycle'];
                    coupon_id?: components['schemas']['CommonProperties']['coupon_id'];
                    coupon_code?: components['schemas']['CommonProperties']['coupon_code'];
                    country_code?: components['schemas']['CommonProperties']['country_code_nullable'];
                    vat_id?: components['schemas']['CommonProperties']['vat_id_nullable'];
                    email?: components['schemas']['Cart']['email'];
                    first?: components['schemas']['Cart']['first'];
                    last?: components['schemas']['Cart']['last'];
                    ip?: components['schemas']['CommonProperties']['ip'];
                };
            };
        };
        responses: {
            /** @description Provides the updated cart with details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Cart'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'carts/delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Cart.
                 * @example 1234
                 */
                cart_id: components['parameters']['cart_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'carts/list': {
        parameters: {
            query?: {
                /** @description You can use the `filter` parameter to filter by status. If you don't provide a status, the endpoint will return all carts. */
                filter?: 'all' | 'abandoned' | 'completed' | 'recovered' | 'recovery' | 'active';
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description Defaults to false, if true returns enriched cart details. */
                enriched?: boolean;
                /** @description Filter the cart collections by the email address. */
                email?: string;
                /** @description Number of carts to retrieve. */
                count?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provides a collection of carts associated with the product. All carts are listed under the `carts` key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        carts?: (components['schemas']['Cart'] & {
                            /**
                             * Format: float
                             * @description Email of the user associated with the cart. (Only available when `enriched` is set to `true`.)
                             * @example 359.64
                             */
                            gross?: number | null;
                            /**
                             * @description Coupon code associated with the cart. (Only available when `enriched` is set to `true`.)
                             * @example BLACKFRIDAY2024
                             */
                            coupon_code?: string | null;
                            /**
                             * @description Number of licenses associated with the cart. (Only available when `enriched` is set to `true`.)
                             * @example 10
                             */
                            licenses?: number | null;
                        })[];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'coupons/retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The coupon is retrieved successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Coupon'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    plans?: components['schemas']['Coupon']['plans'];
                    licenses?: components['schemas']['Coupon']['licenses'];
                    billing_cycles?: components['schemas']['Coupon']['billing_cycles'];
                    user_type?: components['schemas']['Coupon']['user_type'];
                    code?: components['schemas']['Coupon']['code'];
                    discount?: components['schemas']['Coupon']['discount'];
                    discount_type?: components['schemas']['Coupon']['discount_type'];
                    start_date?: components['schemas']['Coupon']['start_date'];
                    end_date?: components['schemas']['Coupon']['end_date'];
                    redemptions_limit?: components['schemas']['Coupon']['redemptions_limit'];
                    has_renewals_discount?: components['schemas']['Coupon']['has_renewals_discount'];
                    has_addons_discount?: components['schemas']['Coupon']['has_addons_discount'];
                    is_one_per_user?: components['schemas']['Coupon']['is_one_per_user'];
                    is_active?: components['schemas']['Coupon']['is_active'];
                };
            };
        };
        responses: {
            /** @description The coupon is updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Coupon'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/list': {
        parameters: {
            query?: {
                /** @description The coupon code filter. */
                code?: string;
                /** @description If `true`, each coupon will include multi-currency discount properties. Coupons will only be enriched if no filtering is used. */
                is_enriched?: boolean;
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /** @description Optional coupon code prefix for search coupons. */
                prefix?: string;
                /** @description Optional coupon code(or code part) for search coupons. */
                search?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provides a collection of coupons associated with the product. All coupons are listed under the `coupons` key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        coupons?: (components['schemas']['Coupon'] & {
                            discounts?: Record<string, never>;
                        })[];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'coupons/create': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    plans?: components['schemas']['Coupon']['plans'];
                    licenses?: components['schemas']['Coupon']['licenses'];
                    billing_cycles?: components['schemas']['Coupon']['billing_cycles'];
                    user_type?: components['schemas']['Coupon']['user_type'];
                    code?: components['schemas']['Coupon']['code'];
                    discount?: components['schemas']['Coupon']['discount'];
                    discount_type?: components['schemas']['Coupon']['discount_type'];
                    start_date?: components['schemas']['Coupon']['start_date'];
                    end_date?: components['schemas']['Coupon']['end_date'];
                    redemptions_limit?: components['schemas']['Coupon']['redemptions_limit'];
                    has_renewals_discount?: components['schemas']['Coupon']['has_renewals_discount'];
                    has_addons_discount?: components['schemas']['Coupon']['has_addons_discount'];
                    is_one_per_user?: components['schemas']['Coupon']['is_one_per_user'];
                    is_active?: components['schemas']['Coupon']['is_active'];
                };
            };
        };
        responses: {
            /** @description The coupon is created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Coupon'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'coupons/retrieve-note': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The coupon note details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/update-note': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example This is an updated note. */
                    note?: string;
                };
            };
        };
        responses: {
            /** @description The coupon note was updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/create-note': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /** @example This is a note. */
                    note?: string;
                };
            };
        };
        responses: {
            /** @description The note was added to the coupon. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Note'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/delete-note': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/retrieve-special': {
        parameters: {
            query?: {
                /** @description Filter based on a coupon type. */
                type?: components['schemas']['CouponEntity']['type'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The special coupons details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        coupon_entities?: components['schemas']['CouponEntityEnriched'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/create-special': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
                /**
                 * @description The ID of the special coupon.
                 * @example cart_recovery
                 */
                special_id: components['parameters']['special_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The special coupon has been created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CouponEntityEnriched'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'coupons/delete-special': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the coupon.
                 * @example 1234
                 */
                coupon_id: components['parameters']['coupon_id'];
                /**
                 * @description The ID of the special coupon.
                 * @example cart_recovery
                 */
                special_id: components['parameters']['special_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/list-email-addresses': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of all the email addresses associated with a product. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginEmailAddress'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/delete-email-addresses': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Email addresses deleted. Product set to use the default store-level email addresses. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/update-email-addressses': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['PluginEmailAddress'];
            };
        };
        responses: {
            /** @description Email addresses updated. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/retrieve-email-template': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /** @description The ID of the email. */
                email_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The email template. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EmailTemplate'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/update-email-template': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /** @description The ID of the email. */
                email_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    subject?: components['schemas']['EmailTemplate']['subject'];
                    html?: components['schemas']['EmailTemplate']['html'];
                    plain?: components['schemas']['EmailTemplate']['plain'];
                };
            };
        };
        responses: {
            /** @description The updated email template. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EmailTemplate'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'events/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the event.
                 * @example 1234
                 */
                event_id: components['parameters']['event_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The retrieved event. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['EventLog'] & {
                        /** @description A map of related objects keyed by their type or ID, such as Payment, User, Install, or License. */
                        objects?: {
                            user?: components['schemas']['UserPluginEnriched'] | null;
                            install?: components['schemas']['Install'] | null;
                            payment?: components['schemas']['Payment'] | null;
                            subscription?: components['schemas']['Subscription'] | null;
                            license?: components['schemas']['License'] | null;
                        } & {
                            [key: string]: unknown;
                        };
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'events/list': {
        parameters: {
            query?: {
                /** @description Filter events by type string or event name, such as `license.created`. See the [documentation](https://freemius.com/help/documentation/saas/events-webhooks/#event_types) for a list of available event types. */
                type?: string;
                /** @description Filter events by state: 'pending', 'processed', 'error', or 'canceled'. */
                state?: components['schemas']['CommonEnums']['EventLogState'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A collection of events. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        events?: components['schemas']['EventLog'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/retrieve-feature': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the feature.
                 * @example 1234
                 */
                feature_id: components['parameters']['feature_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The product's feature. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Feature'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/update-feature': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the feature.
                 * @example 1234
                 */
                feature_id: components['parameters']['feature_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    title?: components['schemas']['Feature']['title'];
                    description?: components['schemas']['Feature']['description'];
                    is_featured?: components['schemas']['Feature']['is_featured'];
                };
            };
        };
        responses: {
            /** @description The updated feature. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Feature'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/delete-feature': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the feature.
                 * @example 1234
                 */
                feature_id: components['parameters']['feature_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/list-features': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The product features collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        features?: components['schemas']['Feature'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Plugin'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': {
                    icon?: components['schemas']['CommonProperties']['icon'];
                    data?: components['schemas']['CommonRequestSchemas']['MultipartJsonData'];
                };
                'application/json': {
                    slug?: components['schemas']['Plugin']['slug'];
                    title?: components['schemas']['Plugin']['title'];
                    type?: components['schemas']['Plugin']['type'];
                    plans?: components['schemas']['Plugin']['plans'];
                    features?: components['schemas']['Plugin']['features'];
                    money_back_period?: components['schemas']['Plugin']['money_back_period'];
                    refund_policy?: components['schemas']['Plugin']['refund_policy'];
                    annual_renewals_discount?: components['schemas']['Plugin']['annual_renewals_discount'];
                    renewals_discount_type?: components['schemas']['Plugin']['renewals_discount_type'];
                    is_pricing_visible?: components['schemas']['Plugin']['is_pricing_visible'];
                    default_plan_id?: components['schemas']['Plugin']['default_plan_id'];
                    /**
                     * @description Can be one of the following values: `1` for `PayPal`, `2` for `Credit Cards`, or `0` for both.
                     * @enum {integer}
                     */
                    accepted_payments?: 0 | 1;
                    /** @description `True` to expose license key to customers upon purchase/subscription. (Available for 'SaaS' products only) */
                    expose_license_key?: boolean;
                    /** @description `True` to include in the after-purchase emails the customer portal login link. */
                    enable_after_purchase_email_login_link?: boolean;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Plugin'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/get-info': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginInfo'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-plans-features-for-addon': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the Addon.
                 * @example 1234
                 */
                addon_id: components['parameters']['addon_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The plan's features collection for Addon on an install. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        features?: components['schemas']['Feature'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/resolve-clone': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the clone.
                 * @example 1234
                 */
                clone_id: components['parameters']['clone_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    resolution: components['schemas']['InstallClone']['resolution'];
                    new_install_id?: components['schemas']['InstallClone']['new_install_id'];
                };
            };
        };
        responses: {
            /** @description Install clone created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InstallClone'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'installations/create-clone': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    /**
                     * @description The URL of the new site to clone the install to.
                     * @example https://example.com
                     */
                    site_url: string;
                };
            };
        };
        responses: {
            /** @description Install clone created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InstallClone'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-installs-count': {
        parameters: {
            query?: {
                /** @description (optional) Return the count of installs that are associated with a non-expired license for the given plan ID. */
                plan_id?: number;
                /** @description (optional) Return active installs only. */
                is_active?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The number of installs with the product. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example 123 */
                        count?: number;
                    };
                };
            };
        };
    };
    'installations/downgrade-default-plan': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Deactivate license. */
                    deactivate_license?: boolean;
                    reason_ids?: components['schemas']['Uninstall']['reason_id'];
                    reason?: components['schemas']['Uninstall']['reason_info'];
                };
            };
        };
        responses: {
            /** @description Product plan downgraded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Install'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-events': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description Filter events by type string or event name. */
                type?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Events triggered by the install. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        events?: components['schemas']['EventLog'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-install': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The install details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Install'] & {
                        /** @description Whether the install is participating in the beta program. */
                        is_beta?: boolean;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'installations/update-install': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    uid?: components['schemas']['CommonProperties']['uid'];
                    license_key?: components['schemas']['License']['secret_key'];
                    url?: components['schemas']['Install']['url'];
                    title?: components['schemas']['Install']['title'];
                    version?: components['schemas']['Install']['version'];
                    sdk_version?: components['schemas']['Install']['sdk_version'];
                    platform_version?: components['schemas']['Install']['platform_version'];
                    programming_language_version?: components['schemas']['Install']['programming_language_version'];
                    plan_id?: components['schemas']['Plan']['id'];
                    trial_plan_id?: components['schemas']['Install']['trial_plan_id'];
                    /**
                     * Format: date-time
                     * @description The datetime that the trial expires.
                     * @example 2025-01-01 00:00:00
                     */
                    trials_ends?: string;
                    subscription_id?: components['schemas']['Subscription']['id'];
                    is_locked?: components['schemas']['Install']['is_locked'];
                    is_active?: components['schemas']['Install']['is_active'];
                    is_disconnected?: components['schemas']['Install']['is_disconnected'];
                    is_premium?: components['schemas']['Install']['is_premium'];
                    is_sdk_required?: components['schemas']['Plugin']['is_sdk_required'];
                    reason_id?: components['schemas']['Uninstall']['reason_id'];
                    reason_info?: components['schemas']['Uninstall']['reason_info'];
                    /** @description The site plugins installed. */
                    plugins?: string;
                    /** @description The site themes installed. */
                    themes?: string;
                    is_beta?: components['schemas']['BetaParticipation']['is_beta'];
                    /** @description Recover the install. */
                    recover?: boolean;
                    is_uninstalled?: components['schemas']['Install']['is_uninstalled'];
                    /**
                     * Format: int64
                     * @description The ID of the user. This is used for ownership change of the install.
                     * @example 1234
                     */
                    user_id?: string;
                    /**
                     * @description The email of the user. This is used for ownership change of the install.
                     * @example foo@example.com
                     */
                    user_email?: string;
                    /**
                     * @description A comma seperated string of Install IDs. This is used for ownership change of the install.
                     * @example 1234,2478,2345
                     */
                    install_ids?: string[];
                };
            };
        };
        responses: {
            /** @description Install updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Install'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/delete-install': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-installs': {
        parameters: {
            query?: {
                /** @description Install IDs collection to filter. */
                ids?: string;
                /** @description Install status to filter the installs by. */
                filter?:
                    | 'all'
                    | 'active'
                    | 'inactive'
                    | 'trial'
                    | 'paying'
                    | 'uninstalled'
                    | 'active_premium'
                    | 'active_free';
                /** @description Plugin version to filter the installs by. */
                version?: string;
                /** @description License ID to filter the installs by. */
                license_id?: number;
                /** @description Plan ID to filter the installs by. */
                plan_id?: number;
                /** @description Install title to filter the installs by. */
                title?: string;
                /** @description Install URL to filter the installs by. */
                url?: string;
                /** @description Search item to filter the installs by e.g. domain, site_id, or reason info. */
                search?: string;
                /** @description If true, loads all installs, including the uninstalled ones. */
                all?: boolean;
                /** @description Reason ID (either string or numeric) to filter the installs by. */
                reason_id?: string;
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Installs collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        installs?: components['schemas']['Install'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-active-license-by-uid': {
        parameters: {
            query: {
                /** @description The license key used for the activation of the install. */
                license_key: components['schemas']['License']['secret_key'];
                /** @description The Unique identifier. It is a 32 characters long string. */
                uid: components['parameters']['uid'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful operation */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-active-license-by-id': {
        parameters: {
            query: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description The license key used on the install. */
                license_key: components['schemas']['License']['secret_key'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Install's licence */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/activate-license': {
        parameters: {
            query: {
                /** @description The license key received from the checkout. */
                license_key: string;
                /** @description If `true`, the parent license's and plan's info will be included in the result if there's any. */
                is_enriched?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activated licence. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/deactivate-license': {
        parameters: {
            query: {
                /** @description The same license key used to activate the install. */
                license_key: string;
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Activated licence. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-active-licenses': {
        parameters: {
            query?: {
                /** @description If `true`, the parent license's and plan's info will be included in the result if there's any. */
                is_enriched?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Active license. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        licenses?: components['schemas']['License'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/list-subscriptions': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscriptions collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        subscriptions?: components['schemas']['Subscription'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-market-items': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description All market items associated with the install. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        market_items?: components['schemas']['MarketItem'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'developers/add-team-member': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    role: components['schemas']['Member']['allOf']['1']['role'];
                    /**
                     * Format: int64
                     * @description The id of the new member (Developer ID).
                     * @example 1234
                     */
                    member_id?: string;
                    /**
                     * @description The email of the new member.
                     * @example foo@example.com
                     */
                    email?: string;
                };
            };
        };
        responses: {
            /** @description Team member added successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description The id of the team member.
                         * @example 1234
                         */
                        id?: number;
                        /**
                         * @description The email of the team member.
                         * @example foo@example.com
                         */
                        email?: string;
                        /**
                         * @description The first name of the team member.
                         * @example John
                         */
                        first?: string;
                        /**
                         * @description The last name of the team member.
                         * @example Doe
                         */
                        last?: string;
                        /** @description The picture of the team member. */
                        picture?: string;
                        role?: components['schemas']['Member']['allOf']['1']['role'];
                        plugin_id?: components['schemas']['Member']['allOf']['1']['plugin_id'];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-payments': {
        parameters: {
            query?: {
                /** @description If `true`, loads linked user email, install URL, subscription billing cycle and plan name. */
                extended?: boolean;
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payments collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        payments?: (components['schemas']['Payment'] & {
                            email?: components['schemas']['User']['email'];
                            url?: components['schemas']['Install']['url'];
                            billing_cycle?: components['schemas']['Subscription']['billing_cycle'];
                            plan_name?: components['schemas']['Plan']['name'];
                            /** @description 512-character reason for the refund. */
                            refund_reason?: string | null;
                        })[];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/update-permissions': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Whether to enable the selected permission. */
                    is_enabled?: boolean;
                    /**
                     * Format: csv
                     * @description Comma separated list of permissions to update. Allowed values are `site`, `user`, `extensions`.
                     * @example site,user,extensions
                     */
                    permissions?: string;
                };
            };
        };
        responses: {
            /** @description Install permission updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['InstallMetadata'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-plan': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Install Plan */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Plan'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/list-plans': {
        parameters: {
            query?: {
                /** @description Show all plans whether released to customers or hidden. */
                show_pending?: boolean;
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Install Plans */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        plans?: components['schemas']['Plan'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/create-new-license': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    is_block_features?: components['schemas']['License']['is_block_features'];
                    period?: components['schemas']['Subscription']['billing_cycle'];
                    expires_at?: components['schemas']['License']['expiration'];
                    /** @description Whether or not to email the license key and download link to the user. */
                    send_email?: boolean;
                };
            };
        };
        responses: {
            /** @description License created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/start-trial': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * Format: date-time
                     * @description The expiry date of the trial. If set, will set the trial expiration based on that parameter. **Note:** Trial expiration date cannot exceed the maximum trial period days based on the plan configuration.
                     * @example 2025-01-01 00:00:00
                     */
                    trial_ends?: string;
                    phone?: components['schemas']['Billing']['phone'];
                    /** @description Whether emails will be sent to users or log events. If `true`, no emails will be sent nor events logged. */
                    is_migration?: boolean;
                    /** @description Security token for sandbox mode trial. */
                    trial_token?: string;
                    /**
                     * @description Security timestamp for sandbox mode trial.
                     * @example 1730160000
                     */
                    trial_timestamp?: string;
                };
            };
        };
        responses: {
            /** @description Started Trial */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        trial?: components['schemas']['Trial'];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/cancel-trial': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    reason_ids?: components['schemas']['Uninstall']['reason_id'][];
                    reason?: components['schemas']['Uninstall']['reason_info'];
                };
            };
        };
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-uninstall-details': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The uninstall details. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Uninstall'] & {
                        /** @description The reason for the uninstall which translates to the string value of the uninstall `reason_id`. */
                        reason?: string;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'installations/list-updates': {
        parameters: {
            query: {
                /** @description The product's version of the current install. The endpoint will return newer versions when set. This is a required param unless `older_than` is provided. */
                version: string;
                /** @description If provided, only versions that are older than this will be returned. */
                older_than?: string;
                /** @description The product type. If the type provide is `all`, the latest `released` or `pending` version will be returned, whichever has the higher version. */
                type?: 'released' | 'pending' | 'beta' | 'all';
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updates collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        tags?: (components['schemas']['PluginTag'] & {
                            is_released?: components['schemas']['Plugin']['is_released'];
                            /**
                             * @description The Installation zip file URL with authentication token.
                             * @example https://example.com/
                             */
                            url?: string;
                        })[];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'installations/retrieve-latest-update': {
        parameters: {
            query?: {
                /** @description If set, tries to fetch the requested version. If requires premium but no license, will throw an error. Otherwise, fetch version based on license. */
                is_premium?: boolean;
                /** @description If set, tries to fetch the readme information. */
                readme?: boolean;
                /** @description If set, return the latest version's data only if it's newer than this property's value. */
                newer_than?: boolean;
                /** @description The product type. If the type provided is `all`, the latest `released`, `beta`,  or `pending` version will be returned, whichever has the higher version. */
                type?: 'released' | 'pending' | 'beta' | 'all';
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Updates collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginTag'] & {
                        is_released?: components['schemas']['Plugin']['is_released'];
                        /**
                         * @description The Installation zip file URL with authorization token.
                         * @example https://example.com/
                         */
                        url?: string;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/change-ownership': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description The transfer token salt. This is generated by Freemius and sent over email with expiration. */
                    token_salt: unknown;
                    /** @description Candidate or owner email. */
                    email: unknown;
                    /** @description Defaults to 'transfer' for backward compatibility. */
                    transfer_type?: unknown;
                    /** @description Token generated by Freemius. Get this from the [Developer Dashboard](https://dashboard.freemius.com). */
                    owner_token?: unknown;
                    /** @description Token generated by Freemius. Get this from the [Developer Dashboard](https://dashboard.freemius.com). */
                    candidate_token?: unknown;
                    /** @description The URL to redirect after the user confirms the ownership change. */
                    after_confirm_url?: unknown;
                    /** @description Comma-separated list of IDs of installs that should be transferred to the new owner. This can include add-ons' install IDs. */
                    install_ids?: unknown;
                };
            };
        };
        responses: {
            /** @description Install ownership changed successfully. No response will be sent, but it will be redirected to the `after_confirm_url` if it was used when initiating the ownership transfer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/send-verification-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the install.
                 * @example 1234
                 */
                install_id: components['parameters']['install_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description URL address that the user will be auto forwarded to after email confirmation is clicked.
                     * @example https://example.com/email-confirmation/
                     */
                    after_email_confirm_url?: string;
                };
            };
        };
        responses: {
            /** @description Successful operation. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/check-status': {
        parameters: {
            query?: {
                /** @description You can use this flag in conjunction with the Moderation Setting of your product.
                 *
                 *     In case you want to limit the activation of your product to new instances only (say after migrating to Freemius) you can check the relevant settings from the Developer Dashboard and from your product make an API request like below:
                 *
                 *     - If your product is already active in some device before joining Freemius - Set value to `true`.
                 *     - Otherwise set value to `false`.
                 *
                 *     This will also work with any “Activation limitation” you have put in your Moderation settings. */
                is_update?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Product status. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description The product status. */
                        is_active?: boolean;
                        /**
                         * Format: int64
                         * @description The timestamp when the product status was done.
                         * @example 1742454772
                         */
                        timestamp?: number;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/activate': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    uid: components['schemas']['CommonProperties']['uid'];
                    license_key: components['schemas']['License']['secret_key'];
                    /** @description Site's homepage URL. */
                    url?: string;
                    /** @description Site's title. */
                    title?: string;
                    /** @description Product's version. */
                    version?: string;
                    is_marketing_allowed?: components['schemas']['User']['is_marketing_allowed'];
                    /** @description Install ID when activating on an already existing install. If provided must belong to the same user as the license owner and must have the same UID. The new license will be activated for the install and existing one will be deactivated. */
                    install_id?: number;
                    /** @description First name of the user (only needed when activating a ghost license). */
                    first_name?: string;
                    /** @description Last name of the user (only needed when activating a ghost license). */
                    last_name?: string;
                    /** @description Email address of the user (only needed when activating a ghost license). */
                    user_email?: string;
                };
            };
        };
        responses: {
            /** @description License activated successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        user_id?: components['schemas']['User']['id'];
                        user_secret_key?: components['schemas']['User']['secret_key'];
                        user_public_key?: components['schemas']['User']['public_key'];
                        plugin_id?: components['schemas']['Plugin']['id'];
                        license_plan_name?: components['schemas']['Plan']['name'];
                        is_marketing_allowed?: components['schemas']['User']['is_marketing_allowed'];
                        install_id?: components['schemas']['Install']['id'];
                        install_secret_key?: components['schemas']['Install']['secret_key'];
                        install_public_key?: components['schemas']['Install']['public_key'];
                        /**
                         * @description The API access token with which authenticated requests can be made for this `install` entity. You need to set this token as the `Bearer` token in the `Authorization` header. For example: <pre>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9</pre>
                         * @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                         */
                        install_api_token?: string;
                    };
                };
            };
            400: components['responses']['400'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/generate-upgrade-link': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * Format: int64
                     * @description The plan ID to upgrade to.
                     */
                    plan_id?: string;
                    billing_cycle?: components['schemas']['CommonEnums']['PlanPeriod'];
                    /** @description The quota to use. Can be a number or the string 'unlimited'. */
                    quota?: number | 'unlimited';
                    /**
                     * @description Whether to update the payment method. If true, the link will be generated for the current plan and billing cycle of the license and other parameters will be ignored. If the license is not associated with a subscription, or is lifetime, an exception will be thrown.
                     * @default false
                     */
                    is_payment_method_update?: boolean;
                };
            };
        };
        responses: {
            /** @description Upgrade link generated successfully. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['CheckoutUpgradeLink'];
                };
            };
            400: components['responses']['400'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/deactivate': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    uid: components['schemas']['CommonProperties']['uid'];
                    /** @description Install ID from which the license should be deactivated. The license must be active on the install. */
                    install_id: number;
                    license_key: components['schemas']['License']['secret_key'];
                };
            };
        };
        responses: {
            /** @description License deactivated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Install'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The retrieved license. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/update': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    quota?: components['schemas']['License']['quota'];
                    expiration?: components['schemas']['License']['expiration'];
                    is_block_features?: components['schemas']['License']['is_block_features'];
                    is_whitelabeled?: components['schemas']['License']['is_whitelabeled'];
                    is_free_localhost?: components['schemas']['License']['is_free_localhost'];
                    new_user_id?: components['schemas']['License']['user_id'];
                    /**
                     * @description (optional) When set to `true` will cancel the subscription.
                     * @example true
                     */
                    cancel_subscription?: boolean;
                    /**
                     * @description (optional) When set to `true` to extend the bundle license.
                     * @example true
                     */
                    extend_bundle?: boolean;
                    /**
                     * @description (optional) When set to `true`, it will update the relevant (subscription renewal or trial end) date to 24 hours before license expiration.
                     * @example true
                     */
                    update_subscription_renewal_date?: boolean;
                };
            };
        };
        responses: {
            /** @description The updated license. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/cancel': {
        parameters: {
            query?: {
                /** @description (optional) Whether to delete the license. If not `true` then the license is cancelled. */
                delete?: boolean;
                /** @description (optional) Whether to include the bundle license in the deletion or delete the main license only. */
                include_bundle?: boolean;
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: components['schemas']['License'];
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/list': {
        parameters: {
            query?: {
                /** @description Filter licenses by status. */
                filter?: 'active' | 'cancelled' | 'expired' | 'abandoned' | 'migrated';
                /** @description Filter licenses by plan ID. */
                plan_id?: number;
                /** @description Search license id or key. */
                search?: string;
                /** @description If `true`, returns the associated user information. */
                enriched?: boolean;
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description If set, returns only licenses that are associated with the given source ID. */
                source?: number;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The licenses collection is retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        licenses?: components['schemas']['LicenseEnriched'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/assign': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description User's email address.
                     * @example foo@example.com
                     */
                    email: string;
                    /**
                     * @description User's full name.
                     * @example John Doe
                     */
                    name?: string;
                    license_key: components['schemas']['License']['secret_key'];
                    is_marketing_allowed?: components['schemas']['User']['is_marketing_allowed'];
                };
            };
        };
        responses: {
            /** @description The license is assigned. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/deactivate-installs': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Licenses deactivated from all installs. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/sync-activations': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description License activations synced. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['License'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/send-renewal-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The license renewal email is sent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @description Whether the email is sent. */
                        sent?: boolean;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/resend-keys': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description The user's email address associated with the license.
                     * @example johndoe@example.com
                     */
                    email: string;
                };
            };
        };
        responses: {
            /** @description The license key has been resent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/resend-upgrade-email': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description License email resent. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/retrieve-latest-subscription': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Subscription'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/cancel-current-subscription': {
        parameters: {
            query?: {
                /** @description Optional cancellation reason IDs. */
                reason_ids?: components['schemas']['Uninstall']['reason_id'][];
                reason?: components['schemas']['Uninstall']['reason_info'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Subscription'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'payments/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the payment.
                 * @example 1234
                 */
                payment_id: components['parameters']['payment_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Retrieve a specific payment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Payment'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'payments/list': {
        parameters: {
            query?: {
                /** @description Search by `payment_id`, `external_payment_id`, or `user_email`. */
                search?: string;
                /** @description User ID to filter with. */
                search_user_id?: components['schemas']['CommonProperties']['user_id'];
                /** @description Filter by billing cycle. */
                billing_cycle?: components['parameters']['billing_cycle'];
                currency?: components['schemas']['CommonEnums']['Currency'];
                /** @description Filter payments by coupon ID. */
                coupon_id?: components['schemas']['CommonProperties']['id'];
                /** @description Filter payments by different types */
                filter?: 'all' | 'refunds' | 'not_refunded' | 'disputed' | 'won_disputes' | 'chargebacks';
                /** @description If true, loads linked user, plan and subscription. */
                extended?: boolean;
                /**
                 * @description The end of the date range in YYYY-MM-DD HH:MM:SS format
                 * @example 2025-08-01 00:00:00
                 */
                to?: components['parameters']['to'];
                /**
                 * @description The start of the date range in YYYY-MM-DD HH:MM:SS format
                 * @example 2025-08-01 00:00:00
                 */
                from?: components['parameters']['from'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The payment collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        payments?: (components['schemas']['Payment'] & {
                            email?: components['schemas']['User']['email'];
                            url?: components['schemas']['Install']['url'];
                            billing_cycle?: components['schemas']['Subscription']['billing_cycle'];
                            /** @description Name of the plan the payment is associated with. */
                            plan_name?: string;
                            /** @description If the payment is refunded, this will contain the reason. */
                            refund_reason?: string;
                        })[];
                        discounts?: components['schemas']['Discount'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'payments/download-invoice': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the payment.
                 * @example 1234
                 */
                payment_id: components['parameters']['payment_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description PDF invoice */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/pdf': unknown;
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/gdpr-compliance-check': {
        parameters: {
            query: {
                /** @description Unique identifier of the caller. The UID must be same when pinging and when activating or deactivating a license. The generation of the UID is a responsibility of the client. */
                uid: components['schemas']['CommonProperties']['uid'];
                /** @description If the call is during a product update. */
                is_update?: boolean;
                /** @description Whether the request is made for testing GDPR compliance from the client of the product. */
                is_gdpr_test?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response from the product */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /**
                         * @description Just a "pong" to annotate the success.
                         * @example pong
                         * @enum {string}
                         */
                        api?: 'pong';
                        /**
                         * @description Whether GDPR compliance is required for the client.
                         * @example false
                         */
                        is_gdpr_required?: boolean;
                        /**
                         * Format: rfc-2822
                         * @description Timestamp in [RFC 2822](http://www.faqs.org/rfcs/rfc2822) or [RFC 5322](http://www.faqs.org/rfcs/rfc5322) format.
                         * @example Thu, 21 Jan 2021 12:00:00 +0000
                         */
                        timestamp?: string;
                        /**
                         * @description Whether the product is active. Only returned when `is_update` is true in the request.
                         * @example true
                         */
                        is_active?: boolean;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            404: components['responses']['404'];
        };
    };
    'plans/list-currencies': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The list of all currencies for all the plans. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        currencies?: components['schemas']['CommonEnums']['Currency'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/list-features': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Feature listing of a plan. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        features?: (components['schemas']['Feature'] & components['schemas']['FeaturePlan'])[];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Plan listing. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Plan'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/list': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of all the plans. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        plans?: components['schemas']['Plan'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/create': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name?: components['schemas']['Plan']['name'];
                    title?: components['schemas']['Plan']['title'];
                    description?: components['schemas']['Plan']['description'];
                    is_free_localhost?: components['schemas']['Plan']['is_free_localhost'];
                    is_block_features?: components['schemas']['Plan']['is_block_features'];
                    is_block_features_monthly?: components['schemas']['Plan']['is_block_features_monthly'];
                    license_type?: components['schemas']['Plan']['license_type'];
                    trial_period?: components['schemas']['Plan']['trial_period'];
                    is_require_subscription?: components['schemas']['Plan']['is_require_subscription'];
                    support_forum?: components['schemas']['Plan']['support_forum'];
                    support_kb?: components['schemas']['Plan']['support_kb'];
                    support_email?: components['schemas']['Plan']['support_email'];
                    support_phone?: components['schemas']['Plan']['support_phone'];
                    is_success_manager?: components['schemas']['Plan']['is_success_manager'];
                    is_featured?: components['schemas']['Plan']['is_featured'];
                };
            };
        };
        responses: {
            /** @description A new plan is created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Plan'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/clone-pricing-other-currency': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /**
                     * @description The currency of the pricing to be created.
                     * @example eur
                     * @enum {string}
                     */
                    to_currency?: 'eur' | 'usd' | 'gbp';
                    /**
                     * @description The currency of the pricing to clone.
                     * @default usd
                     * @enum {string}
                     */
                    from_currency?: 'eur' | 'usd' | 'gbp';
                };
            };
        };
        responses: {
            /** @description New pricing for the currency created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        pricing?: components['schemas']['Pricing'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/retrieve-pricing': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The plan pricing. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        pricing?: components['schemas']['Pricing'];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/update-pricing': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': components['schemas']['Pricing'];
            };
        };
        responses: {
            /** @description The plan pricing was updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        pricing?: components['schemas']['Pricing'];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/delete-s-pricing': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The plan pricing was deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/list-s-pricing': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                currency?: components['schemas']['CommonEnums']['Currency'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The collection of the plan's pricing. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        pricing?: components['schemas']['Pricing'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/create-pricing': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                currency?: components['schemas']['CommonEnums']['Currency'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    monthly_price?: components['schemas']['Pricing']['monthly_price'];
                    annual_price?: components['schemas']['Pricing']['annual_price'];
                    lifetime_price?: components['schemas']['Pricing']['lifetime_price'];
                    licenses?: components['schemas']['Pricing']['licenses'];
                    currency?: unknown;
                };
            };
        };
        responses: {
            /** @description The pricing for the plan has been created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        pricing?: components['schemas']['Pricing'];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/create-license': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the plan.
                 * @example 1234
                 */
                plan_id: components['parameters']['plan_id'];
                /**
                 * @description The ID of the Pricing.
                 * @example 1234
                 */
                pricing_id: components['parameters']['pricing_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    is_whitelabeled?: components['schemas']['License']['is_whitelabeled'];
                    period?: components['schemas']['Subscription']['billing_cycle'];
                    is_block_features?: components['schemas']['License']['is_block_features'];
                    expires_at?: components['schemas']['License']['expiration'];
                    /** @description (optional) License owner email. */
                    email?: string;
                    /** @description (optional) If the module type is `bundle` and `existing_install_id` is a valid ID of an install that is using a product of the bundle, a child license will automatically be created and activated for the install. */
                    existing_install_id?: string;
                    /** @description (optional) Whether to email the license key and download link to the user. */
                    send_email?: boolean;
                    source?: components['schemas']['License']['source'];
                    /** @description (optional) Predefined license key - this can be used when duplicating a license of another product into another product. */
                    license_key?: string;
                };
            };
        };
        responses: {
            /** @description The license created successfully. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        license?: components['schemas']['License'];
                    };
                };
            };
        };
    };
    'products/retrieve-pricing-table-data': {
        parameters: {
            query?: {
                /** @description The currency to use for the pricing. */
                currency?: components['schemas']['CommonEnums']['Currency'];
                show_pending?: boolean;
                /** @description Whether to show all plans or only the visible ones. */
                type?: 'all' | 'visible';
                /** @description If set to `true`, the result will be enriched with some of the context plugin's information. */
                is_enriched?: boolean;
                /** @description (optional) (Development Only) The ID of the parent bundle product. When getting the pricing of a product, if the product is part of a bundle, you can set the value here (along with the public key of the bundle). This will be used to determine the trial status of the product in sandbox mode. Our WP SDK uses it internally. */
                bundle_product_id?: string;
                /** @description (optional) (Development Only) Used alongside the `bundle_product_id` parameter. */
                bundle_product_public_key?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The features and pricing data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        plugin?: components['schemas']['Plugin'];
                        plans?: (components['schemas']['Plan'] & {
                            pricing?: components['schemas']['Pricing'][];
                        } & {
                            features?: components['schemas']['FeatureEnriched'][];
                        })[];
                        /** @description The label used for the selling unit of the product, e.g., 'Credit', 'Activation', etc. The resulting object will have both singular and plural. */
                        selling_unit_label?: {
                            /**
                             * @description The singular form of the selling unit label.
                             * @example Credit
                             */
                            singular?: string;
                            /**
                             * @description The plural form of the selling unit label.
                             * @example Credits
                             */
                            plural?: string;
                        };
                        /** @description Verified and featured reviews of the product. */
                        reviews?: components['schemas']['PluginReview'][];
                        /**
                         * @description The estimated number of active installs of the product.
                         * @example 10000
                         */
                        active_installs?: number;
                        /**
                         * @description The estimated number of downloads of the product.
                         * @example 5000
                         */
                        downloads?: number;
                        /**
                         * @description Single site pricing for all plans indexed by plan ID
                         * @example {
                         *       "16633": {
                         *         "monthly_price": {
                         *           "usd": 9.99,
                         *           "gbp": 7.99,
                         *           "eur": 8.99
                         *         },
                         *         "annual_price": {
                         *           "usd": 99.99,
                         *           "gbp": 79.99,
                         *           "eur": 89.99
                         *         },
                         *         "lifetime_price": {
                         *           "usd": 299.99,
                         *           "gbp": 249.99,
                         *           "eur": 279.99
                         *         }
                         *       }
                         *     }
                         */
                        all_plans_single_site_pricing?: {
                            [key: string]: {
                                /** @description Monthly pricing in different currencies */
                                monthly_price?: {
                                    /**
                                     * Format: float
                                     * @example 9.99
                                     */
                                    usd?: number;
                                    /**
                                     * Format: float
                                     * @example 7.99
                                     */
                                    gbp?: number;
                                    /**
                                     * Format: float
                                     * @example 8.99
                                     */
                                    eur?: number;
                                };
                                /** @description Annual pricing in different currencies */
                                annual_price?: {
                                    /**
                                     * Format: float
                                     * @example 99.99
                                     */
                                    usd?: number;
                                    /**
                                     * Format: float
                                     * @example 79.99
                                     */
                                    gbp?: number;
                                    /**
                                     * Format: float
                                     * @example 89.99
                                     */
                                    eur?: number;
                                };
                                /** @description Lifetime pricing in different currencies */
                                lifetime_price?: {
                                    /**
                                     * Format: float
                                     * @example 299.99
                                     */
                                    usd?: number;
                                    /**
                                     * Format: float
                                     * @example 249.99
                                     */
                                    gbp?: number;
                                    /**
                                     * Format: float
                                     * @example 279.99
                                     */
                                    eur?: number;
                                };
                            };
                        };
                        /**
                         * @description The URL to the Freemius Checkout. You need to append the product id and plan id as necessary. Please refer to the [Checkout documentation](https://freemius.com/help/documentation/selling-with-freemius/hosted-checkout/) for more information.
                         * @example https://checkout.freemius.com
                         */
                        checkout_url?: string;
                        /**
                         * @description The URL to the Freemius WP Endpoint. This is internally used by the Freemius SDK.
                         * @example https://wp.freemius.com
                         */
                        fs_wp_endpoint_url?: string;
                        /**
                         * @description Whenther the product supports trial for the current install/site. This is relevant for WP products only.
                         * @example true
                         */
                        trial_mode?: boolean;
                        /**
                         * @description Whether the trial has been utilized for the current install/site. This is relevant for WP products only.
                         * @example false
                         */
                        trial_utilized?: boolean;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'reviews/retrieve': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the review.
                 * @example 1234
                 */
                review_id: components['parameters']['review_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The retrieved review. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginReview'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'reviews/update': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the review.
                 * @example 1234
                 */
                review_id: components['parameters']['review_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description Reviewer's profile picture. A maximum of 200KB in size and 300px width and 300px height is allowed.
                     */
                    picture?: string;
                    data?: components['schemas']['CommonRequestSchemas']['MultipartJsonData'];
                };
                'application/json': {
                    title?: components['schemas']['PluginReview']['title'];
                    text?: components['schemas']['PluginReview']['text'];
                    name?: components['schemas']['PluginReview']['name'];
                    rate?: components['schemas']['PluginReview']['rate'];
                    job_title?: components['schemas']['PluginReview']['job_title'];
                    company?: components['schemas']['PluginReview']['company'];
                    company_url?: components['schemas']['PluginReview']['company_url'];
                    profile_url?: components['schemas']['PluginReview']['profile_url'];
                    is_featured?: components['schemas']['PluginReview']['is_featured'];
                };
            };
        };
        responses: {
            /** @description The updated review. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginReview'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'reviews/delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the review.
                 * @example 1234
                 */
                review_id: components['parameters']['review_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'reviews/list': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The reviews collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        reviews?: components['schemas']['PluginReview'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'reviews/create': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description Reviewer's profile picture. A maximum of 200KB in size and 300px width and 300px height is allowed.
                     */
                    picture?: string;
                    data?: components['schemas']['CommonRequestSchemas']['MultipartJsonData'];
                };
                'application/json': {
                    title?: components['schemas']['PluginReview']['title'];
                    text?: components['schemas']['PluginReview']['text'];
                    name?: components['schemas']['PluginReview']['name'];
                    rate?: components['schemas']['PluginReview']['rate'];
                    job_title?: components['schemas']['PluginReview']['job_title'];
                    company?: components['schemas']['PluginReview']['company'];
                    company_url?: components['schemas']['PluginReview']['company_url'];
                    profile_url?: components['schemas']['PluginReview']['profile_url'];
                    is_featured?: components['schemas']['PluginReview']['is_featured'];
                    /**
                     * @description Whether the review is active or not.
                     * @default true
                     */
                    is_active?: boolean;
                };
            };
        };
        responses: {
            /** @description The retrieved review. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginReview'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'reviews/retrieve-summary': {
        parameters: {
            query?: {
                type?: 'all' | 'verified';
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The summary of the review collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        reviews?: {
                            rate?: components['schemas']['PluginReview']['rate'];
                            /**
                             * Format: int64
                             * @description The total number of reviews that have the same rating for the product.
                             * @example 10
                             */
                            count?: string;
                        }[];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/retrieve-setting': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the setting.
                 * @example 1234
                 */
                setting_id: components['parameters']['setting_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The product setting. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Setting'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/update-setting': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the setting.
                 * @example 1234
                 */
                setting_id: components['parameters']['setting_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    data?: components['schemas']['Setting']['data'];
                };
            };
        };
        responses: {
            /** @description Updated product settings. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Setting'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/delete-setting': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the setting.
                 * @example 1234
                 */
                setting_id: components['parameters']['setting_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'products/skip-account-connection': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description MD5 Collection of unique site identifiers. */
                    uids?: components['schemas']['CommonProperties']['uid'][];
                    uid?: components['schemas']['CommonProperties']['uid'];
                };
            };
        };
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'subscriptions/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Subscription'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'subscriptions/update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Logs an event that confirms the user requested that the subscription will continue to auto-renew. */
                    auto_renew?: boolean;
                    /** @description An optional subscription cancellation coupon ID. The coupon must be set as a special "Cancellation Coupon" in the Freemius Developer Dashboard. If provided the discount will be applied to the next renewals. */
                    coupon_id?: number;
                };
            };
        };
        responses: {
            /** @description Subscription retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Subscription'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'subscriptions/cancel': {
        parameters: {
            query?: {
                /** @description Optional cancellation reason IDs. */
                reason_ids?: components['schemas']['Uninstall']['reason_id'][];
                reason?: components['schemas']['Uninstall']['reason_info'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Subscription'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'subscriptions/list': {
        parameters: {
            query?: {
                /** @description Optional search: subscription id, external subscription id or user email */
                search?: string;
                /** @description Filter by billing cycle. */
                billing_cycle?: components['parameters']['billing_cycle'];
                /**
                 * @description Filter by gateway.
                 * @example stripe
                 */
                gateway?: components['parameters']['gateway'];
                /** @description Optional filtering based on the status of the subscription. Defaults to `all`. */
                filter?: 'all' | 'active' | 'cancelled';
                /** @description When set to `true` enrich the subscriptions with the plan name, install URL & title, and user email. */
                extended?: boolean;
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /** @description The sort order of the subscriptions. Example: -id. Default: -id. */
                sort?: 'id' | 'next_payment';
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provides a collection of subscriptions associated with the product. All subscriptions are listed under the `subscriptions` key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        subscriptions?: (components['schemas']['Subscription'] & {
                            /**
                             * @description Name of the plan associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example Professional
                             */
                            plan_name?: string | null;
                            /**
                             * @description Email of the user associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example foo@freemius.com
                             */
                            email?: string | null;
                            /**
                             * @description URL of the installation associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example https://example.com
                             */
                            url?: string | null;
                            /**
                             * @description Title of the installation associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example Website title
                             */
                            title?: string | null;
                        })[];
                        discounts?: components['schemas']['Discount'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'subscriptions/list-payments': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Provides a collection of payments associated with the subscription. All payments are listed under the `payments` key. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        payments?: components['schemas']['Payment'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'subscriptions/create-new-migrated-payment': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the Subscription.
                 * @example 1234
                 */
                subscription_id: components['parameters']['subscription_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    gross?: components['schemas']['Payment']['gross'];
                    payment_external_id?: components['schemas']['Payment']['external_id'];
                    source?: components['schemas']['Migration']['source_external_id'];
                    vat?: components['schemas']['Payment']['vat'];
                    gateway_fee?: components['schemas']['Payment']['gateway_fee'];
                    processed_at?: components['schemas']['Cart']['completed'];
                    /** @description Whether the license should be extended. The default value is `false`. */
                    is_extend_license?: boolean;
                    next_payment?: components['schemas']['Subscription']['next_payment'];
                };
            };
        };
        responses: {
            /** @description The payment was successfully created. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Payment'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'deployments/update': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the product version.
                 * @example 1234
                 */
                tag_id: components['parameters']['tag_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'application/json': {
                    release_mode?: components['schemas']['PluginTag']['release_mode'];
                    limit?: components['schemas']['PluginTag']['limit'];
                    /** @description Instead of `limit`, you can use this property to limit the percentage of license owners that will receive an update. The value must be between 0 and 100. Behind the scenes the system will count the current active license owners and convert it into an absolute value. */
                    percentage_limit?: number;
                    is_incremental?: components['schemas']['PluginTag']['is_incremental'];
                };
            };
        };
        responses: {
            /** @description The updated deployment. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginTag'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'deployments/download': {
        parameters: {
            query?: {
                /** @description (Optional) Whether to retrieve a premium version of the product or not. For WordPress products (plugins and themes) only. */
                is_premium?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the product version.
                 * @example 1234
                 */
                tag_id: components['parameters']['tag_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The zip file of the deployed version. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': unknown;
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'deployments/list': {
        parameters: {
            query?: {
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The product version collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        tags?: components['schemas']['PluginTag'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'deployments/create': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description The zip file containing the product. For WordPress plugins or themes this must contain the root directory.
                     */
                    file: string;
                    /**
                     * Format: json
                     * @description The metadata details associated with this specific product version.
                     * @example {"version": "1.0.0", "requires_platform_version": "1.0.0"}
                     */
                    data?: string;
                };
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginTag'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'deployments/get-latest': {
        parameters: {
            query?: {
                /** @description (Optional) Whether to retrieve a premium version of the product or not. For WordPress products (plugins and themes) only. */
                is_premium?: boolean;
                /** @description Type of the latest deployment to load. If the type provided is `all`, the latest `released`, `beta`, or `pending` version will be returned, whichever has the higher version. */
                type?: 'released' | 'beta' | 'pending' | 'all';
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The latest deployment information. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginTag'] & {
                        /** @description URL to download the deployed ZIP file. This is a secure URL and does not need any additional authentication header. Will expire after 24 hours from the time of generation. */
                        url?: string;
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'deployments/download-latest': {
        parameters: {
            query?: {
                /** @description (Optional) Whether to retrieve a premium version of the product or not. For WordPress products (plugins and themes) only. */
                is_premium?: boolean;
                /** @description Type of the latest deployment to load. If the type provided is `all`, the latest `released`, `beta`, or `pending` version will be returned, whichever has the higher version. */
                type?: 'released' | 'beta' | 'pending' | 'all';
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The zip file of the deployed version. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/zip': unknown;
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'trials/list': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The start of the date range in YYYY-MM-DD HH:MM:SS format
                 * @example 2025-08-01 00:00:00
                 */
                from?: components['parameters']['from'];
                /**
                 * @description The end of the date range in YYYY-MM-DD HH:MM:SS format
                 * @example 2025-08-01 00:00:00
                 */
                to?: components['parameters']['to'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Trial collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        trials?: components['schemas']['Trial'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'installations/uninstall-from-anonymous-site': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    uid?: components['schemas']['CommonProperties']['uid'];
                    reason_id?: components['schemas']['Uninstall']['reason_id'];
                    reason?: components['schemas']['Uninstall']['reason_info'];
                };
            };
        };
        responses: {
            /** @description The product is uninstalled. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example 200 OK */
                    'application/json': string;
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/retrieve-billing': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Billing Information retrieved. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Billing'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/update-or-create-billing': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    business_name?: components['schemas']['Billing']['business_name'];
                    first?: components['schemas']['Billing']['first'];
                    last?: components['schemas']['Billing']['last'];
                    email?: components['schemas']['Billing']['email'];
                    phone?: components['schemas']['Billing']['phone'];
                    website?: components['schemas']['Billing']['website'];
                    tax_id?: components['schemas']['Billing']['tax_id'];
                    address_street?: components['schemas']['Billing']['address_street'];
                    address_apt?: components['schemas']['Billing']['address_apt'];
                    address_city?: components['schemas']['Billing']['address_city'];
                    address_country?: components['schemas']['Billing']['address_country'];
                    address_country_code?: components['schemas']['Billing']['address_country_code'];
                    address_state?: components['schemas']['Billing']['address_state'];
                    address_zip?: components['schemas']['Billing']['address_zip'];
                };
            };
        };
        responses: {
            /** @description Billing information updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Billing'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/list-events': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The user's events log. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        events?: components['schemas']['EventLog'][];
                    };
                };
            };
        };
    };
    'users/retrieve': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The product user data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['User'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/update': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description The name of the user (Optional). */
                    name?: string;
                    first?: components['schemas']['User']['first'];
                    last?: components['schemas']['User']['last'];
                    is_marketing_allowed?: components['schemas']['User']['is_marketing_allowed'];
                    is_beta?: components['schemas']['User']['is_beta'];
                };
            };
        };
        responses: {
            /** @description The product user updated data. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['User'];
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/list': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /** @description Search user by email address. */
                email?: string;
                /** @description Filter user by their financial status */
                filter?: 'all' | 'never_paid' | 'paid' | 'paying' | 'beta';
                /** @description Search by user ID, email or name */
                search?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        users?: components['schemas']['User'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/create': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    /** @description Valid email address. */
                    email?: string;
                    /** @description Valid password. Must have at least 8 characters. */
                    password?: string;
                    /** @description (optional) IPv4 or IPv6 Address */
                    ip?: string;
                    /** @description (optional) Full name property. If not specified, `first` and `last` must be provided instead. */
                    name?: string;
                    /** @description (optional) First name. `Required` if no valid `name` was provided. */
                    first?: string;
                    /** @description (optional) Last name. `Required` if no valid `name` was provided. */
                    last?: string;
                    /** @description (optional) Profile picture URL. */
                    picture?: string;
                    /** @description (optional) Tells if person is already verified, defaults to FALSE. */
                    is_verified?: boolean;
                    /** @description (optional) URL address that the user will be auto forwarded to after email confirmation is clicked. */
                    after_email_confirm_url?: string;
                    /** @description (optional) Defaults to TRUE. If `false`, email verification message will NOT be sent after registration. */
                    send_verification_email?: boolean;
                    is_marketing_allowed?: components['schemas']['User']['is_marketing_allowed'];
                    /** @description (optional) If `true`, no emails will be sent to users nor events will be logged. */
                    is_migration?: string;
                    source?: components['schemas']['Migration']['source_external_id'];
                };
            };
        };
        responses: {
            /** @description OK */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['User'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
        };
    };
    'users/list-installs': {
        parameters: {
            query?: {
                /**
                 * @description Comma-separated install IDs list to filter.
                 * @example 1234,2478,2345
                 */
                install_ids?: string;
                /** @description License ID filter. If set, return installs that are linked to the specified license. */
                license_id?: number;
                /** @description Plan ID filter. If set, return installs associated with the given plan. */
                plan_id?: number;
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Installs collection */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        installs?: components['schemas']['Install'][];
                    };
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/list-licenses': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /** @description Retrieve specific license by its key. */
                license_key?: string;
                /** @description Comma-separated license IDs. */
                ids?: string;
                /** @description Retrieve specific multiple license with a comma-separated string of their license keys. */
                license_keys?: string;
                /** @description The type of license. */
                type?: 'all' | 'active' | 'expired';
                /** @description Returns the license's product type. */
                is_enriched?: boolean;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description License collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        licenses?: (components['schemas']['License'] & {
                            /** @description The product type of the license. */
                            plugin_type?: string;
                            /** @description List of IDs of children products in case the product is a bundle. */
                            products?: components['schemas']['Plugin']['id'][];
                        })[];
                    };
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/get-review-url': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The retrieved review URL. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': unknown;
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'licenses/create-review': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
                /**
                 * @description The ID of the License.
                 * @example 1234
                 */
                license_id: components['parameters']['license_id'];
            };
            cookie?: never;
        };
        /** @description Data needed to create a review with an optional picture. When sending `multipart/form-data` the `data` property must be a JSON object with same structure as the JSON payload. */
        requestBody: {
            content: {
                'multipart/form-data': {
                    /**
                     * Format: binary
                     * @description Reviewer's profile picture. A maximum of 200KB in size and 300px width and 300px height is allowed.
                     */
                    picture?: string;
                    data?: components['schemas']['CommonRequestSchemas']['MultipartJsonData'];
                };
                'application/json': {
                    rate?: components['schemas']['PluginReview']['rate'];
                    title?: components['schemas']['PluginReview']['title'];
                    text?: components['schemas']['PluginReview']['text'];
                    name?: components['schemas']['PluginReview']['name'];
                    job_title?: components['schemas']['PluginReview']['job_title'];
                    company?: components['schemas']['PluginReview']['company'];
                    company_url?: components['schemas']['PluginReview']['company_url'];
                    profile_url?: components['schemas']['PluginReview']['profile_url'];
                    is_active?: components['schemas']['PluginReview']['is_featured'];
                };
            };
        };
        responses: {
            /** @description The created review. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['PluginReview'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/list-payments': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /** @description If `true`, loads linked user, plan and subscription. */
                extended?: boolean;
                /** @description Returns the plugin add-ons' payments as well. */
                include_addons?: boolean;
                /** @description Returns the plugin bundles' payments as well. */
                include_bundles?: boolean;
                /** @description Filter the payments by the status. */
                filter?: 'all' | 'refunds' | 'not_refunded' | 'not_refunded_renewals';
                /** @description Filter by billing cycle. */
                billing_cycle?: components['parameters']['billing_cycle'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Payment collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        payments?: (components['schemas']['Payment'] & {
                            /**
                             * @description 3-char currency code. (Only available when `extended` is set to `true`.)
                             * @enum {string}
                             */
                            currency?: 'usd' | 'eur' | 'gbp';
                            /**
                             * @description Name of the plan associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example Professional
                             */
                            plan_name?: string | null;
                            /**
                             * @description Email of the user associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example foo@freemius.com
                             */
                            email?: string | null;
                            /**
                             * @description URL of the installation associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example https://example.com
                             */
                            url?: string | null;
                            /**
                             * @description The billing cycle of the subscription in number of months. 1 means monthly, 12 means annually, 0 means lifetime usually when subscriptions are created for lifetime trials. (Only available when `extended` is set to `true`.)
                             * @enum {number}
                             */
                            billing_cycle?: 1 | 12 | 0;
                        })[];
                        discounts?: components['schemas']['Discount'][];
                    };
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/list-subscriptions': {
        parameters: {
            query?: {
                /** @description Enrich the subscriptions with the plan name, install URL & title, and user email. */
                extended?: boolean;
                /** @description Filter the subscriptions by the status. */
                filter?: 'all' | 'active' | 'cancelled';
                /** @description Filter by billing cycle. */
                billing_cycle?: 1 | 12;
                /**
                 * @description Filter by gateway.
                 * @example stripe
                 */
                gateway?: components['parameters']['gateway'];
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
                /**
                 * @description The number of records to skip before starting to return records. Default is 0.
                 * @example 10
                 */
                offset?: components['parameters']['offset'];
                /**
                 * @description The number of records to return.
                 * @example 10
                 */
                count?: components['parameters']['count'];
                /** @description Filter the subscriptions by the plan ID. */
                plan_id?: string;
                /** @description Sort the subscriptions by the ID or the next payment date. */
                sort?: 'id' | 'next_payment';
                /** @description Search by subscription ID, external subscription ID or user email. */
                search?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription collection. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        subscriptions?: (components['schemas']['Subscription'] & {
                            /**
                             * @description Name of the plan associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example Professional
                             */
                            plan_name?: string | null;
                            /**
                             * @description Email of the user associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example foo@freemius.com
                             */
                            email?: string | null;
                            /**
                             * @description URL of the installation associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example https://example.com
                             */
                            url?: string | null;
                            /**
                             * @description Title of the installation associated with the subscription. (Only available when `extended` is set to `true`.)
                             * @example Website title
                             */
                            title?: string | null;
                        })[];
                        discounts?: components['schemas']['Discount'][];
                    };
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'users/create-checkout-token': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the product.
                 * @example 1234
                 */
                product_id: components['parameters']['product_id'];
                /**
                 * @description The ID of the User.
                 * @example 1234
                 */
                user_id: components['parameters']['user_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The created checkout token. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': {
                        /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJwcm9kdWN0X2lkIjozLCJ0b2tlbl9leHBpcmF0aW9uIjoxNTY3ODk4NzYwfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c */
                        token?: unknown;
                    };
                };
            };
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/update': {
        parameters: {
            query?: {
                /**
                 * @description Comma separated list of fields to return in the response. If not specified, all fields are returned.
                 * @example id,name,slug
                 */
                fields?: components['parameters']['fields'];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                'application/json': {
                    name?: components['schemas']['Plan']['name'];
                    title?: components['schemas']['Plan']['title'];
                    description?: components['schemas']['Plan']['description'];
                    is_free_localhost?: components['schemas']['Plan']['is_free_localhost'];
                    is_block_features?: components['schemas']['Plan']['is_block_features'];
                    is_block_features_monthly?: components['schemas']['Plan']['is_block_features_monthly'];
                    license_type?: components['schemas']['Plan']['license_type'];
                    trial_period?: components['schemas']['Plan']['trial_period'];
                    is_require_subscription?: components['schemas']['Plan']['is_require_subscription'];
                    support_forum?: components['schemas']['Plan']['support_forum'];
                    support_kb?: components['schemas']['Plan']['support_kb'];
                    support_email?: components['schemas']['Plan']['support_email'];
                    support_phone?: components['schemas']['Plan']['support_phone'];
                    is_success_manager?: components['schemas']['Plan']['is_success_manager'];
                    is_featured?: components['schemas']['Plan']['is_featured'];
                    is_hidden?: components['schemas']['Plan']['is_hidden'];
                };
            };
        };
        responses: {
            /** @description Plan updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    'application/json': components['schemas']['Plan'];
                };
            };
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
    'plans/delete': {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the developer.
                 * @example 1234
                 */
                developer_id: components['parameters']['developer_id'];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            204: components['responses']['204'];
            400: components['responses']['400'];
            401: components['responses']['401'];
            402: components['responses']['402'];
            404: components['responses']['404'];
        };
    };
}
